======================= 
파트 6 : 새로운 높은 곳에 
======================= 

모두의시 
---------- 

시 클라이언트를 크게 발전시켜 왔습니다. 최신 버전 (2.0)은 Transports과 Protocols 그것에 Protocol Factories라는 Twisted 네트워킹 중에서도 핵심 부분을 사용하고 있습니다. 그러나 또한 아직 개선의 여지가 있습니다. 클라이언트 2.0 (2.1도 그렇습니다)는 명령 줄에서시를 다운로드 할 밖에 사용할 수 없습니다. ``PoetryClientFactory``이시를 얻을뿐만 아니라 그것이 끝날 때 프로그램을 종료시킬 수도 맡고 있기 때문입니다. "``PoetryClientFactory``"라는 것에는 불균형 일이고``PoetryProtocol``를 생성하여 다운로드 된시를 정리 이외의 아무 일도해서는 없습니다. 

우선,시를 요구하는 코드에시를 쓰기 방법이 필요합니다. 동기화 프로그램에서는 이런 느낌의 API에하는 것입니다. 
: 

     def get_poetry (host, post) : 
         "" "Return the text of a poem from the poetry server at the given host and port." "" 

그러나 당연히이 있지만 이런 식으로는 할 수 없습니다. 위의 함수는시를 완전히받을 때까지 차단 필요가 있습니다. 아니면 문서에서 말했듯은 움직이지 않습니다. 하지만 이것은 reactive 프로그램입니다. 네트워크 소켓의 블로킹은 문제가되지 않으므로. 우리는시를 전송하는 동안 차단하지 않고시의 준비가되면 호출 코드에 알리는 방법이 필요합니다. 이것은 Twisted 자신이 있었으면 류의 문제입니다. Twisted는 우리의 코드에 다음 시간에 알려야합니다. 소켓 입출력 준비되었을 때, 혹은 어떤 데이터를 수신했을 때, 아니면 타임 아웃이 발생했을 때 등입니다. Twisted이 콜백을 사용하여이 문제를 해결해주는 것을보고 왔습니다. 그러므로 우리도 마찬가지로 콜백을 사용할 수 있습니다. 
: 

     def get_poetry (host, port, callback) : 
         "" " 
         Download a poem from the given host and port and invoke 

           callback (poem) 

         when the poem is complete. 
         "" " 

지금은 Twisted에서 사용할 수있는 비동기 API도 입수 했으므로, 앞서이를 구현하여 봅시다. 

     이전에도 언급했듯이 우리는 어떠한 경우 일반적인 Twisted 프로그래머는 안하는 방식으로 코드를 작성하고 있습니다. 이것은 그런 물건의 종류입니다. 
     파트 7과 8에서 "Twisted의 방식"(무려 추상화를 사용합니까!)의 구현을 볼 수 있습니다. 그러나 간단한 것부터 시작하면 완성형 대한 더 깊은 통찰력을 얻을 수 있습니다. 

클라이언트 3.0 
---------------- 
버전 3.0의 클라이언트`twisted-client-3 / get-poetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py>`_ 에 있습니다. 이 버전에는``get_poetry```함수 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L77>`_의 구현이 있습니다 . 
: 

     def get_poetry (host, port, callback) : 
         from twisted.internet import reactor 
         factory = PoetryClientFactory (callback) 
         reactor.connectTCP (host, port, factory) 

여기에 새롭게 주목하는 유일한 것은``PoetryClientFactory``에 콜백 함수를 전달하는 것입니다. `팩토리 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L66>`_는시를 제공하기 위해 콜백을 사용합니다. 
: 

     class PoetryClientFactory (ClientFactory) : 

         protocol = PoetryProtocol 

         def __init __ (self, callback) : 
             self.callback = callback 

         def poem_finished (self, poem) : 
             self.callback (poem) 

팩토리는 reactor를 종료시키는 책임을지지 않으므로 버전 2.1의 것에 비해 훨씬 쉽게되어 있네요. 연결에 실패한 것을 감지하는 코드도 없어져 있습니다 만, 조금 재 작업 것입니다. 클라이언트 버전 2.1에서 그 기능을 다시 사용할 뿐이므로``PoetryProtocol`` 자신을 변경할 필요가 전혀 없습니다. 
: 

     class PoetryProtocol (Protocol) : 

         poem = ' 

         def dataReceived (self, data) : 
             self.poem + = data 

         def connectionLost (self, reason) : 
             self.poemReceived (self.poem) 

         def poemReceived (self, poem) : 
             self.factory.poem_finished (poem) 

이렇게하면``get_poetry`` 함수와``PoetryClientFactory`` 및``PoetryProtocol`` 클래스는 완전히 재사용 가능한 것으로되었습니다. 시 다운로드 만의 것이며, 다른 것은 아무것도 없습니다. reactor를 시작, 종료하는 모든 논리는`main 함수 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L90>`_이 있습니다 . 
: 

     def poetry_main () : 
         addresses = parse_args () 

         from twisted.internet import reactor 

         poems = [] 

         def got_poem (poem) : 
             poems.append (poem) 
             if len (poems) == len (addresses) : 
                 reactor.stop () 

         for address in addresses : 
             host, port = address 
             get_poetry (host, port, got_poem) 

         reactor.run () 

         for poem in poems : 
             print poem 

요구대로 재사용 가능한 부품을 손에 넣을 수 모두가시를 얻기 위해 사용할 수 있도록 공유 모듈에 배치 할 수 있군요 (물론 Twisted를 사용하는 한이지만). 

그런데 실제로 클라이언트 3.0을 테스트 해 보면,시를 더 빨리 보내도록하거나 더 큰 데이터 덩어리로 전송하는 등시의 서버를 재구성하고 싶을 수도 있습니다. 클라이언트는 불필요한 출력을하지 않게되었으므로,시를 다운로드하는 동안의 수를 모니터링하여도 그다지 재미는 없습니다. 

논의 
--- 
그림 11과 같이 시가 제공되는 시점에서 콜백 체인을 시각화 할 수 있습니다. 

.. _figure11 : 

.. figure :: images / p06_reactor-poem-callback.png 

     그림 11 :시의 콜백 

그림 11에는 설명의 필요가 있군요. 지금까지는 "자신들의 코드"를 호출 해 종료하도록 콜백 체인을 설명했습니다. 그러나 Twisted를 사용하거나 단일 스레드 reactive 시스템의 프로그램을 작성할 때 이러한 콜백 체인은 다른 부분의 코드를 호출하도록하여 우리의 코드를 가져올 수 있습니다. 즉, reactive 스타일 프로그래밍은 우리 자신이 작성한 코드에 도달하여도 멈추지 않습니다. reactor 기반 시스템에서는 콜백 나가는뿐입니다. 

프로젝트 Twisted을 사용할 때는이 점을 염두에 두시기 바랍니다. 이렇게 결심 한 때 

     Twisted를 사용거야! 

이 결정도 한 것입니다. 

     reactor 루프에 근거한 일련의 비동기 콜백 체인의 호출로 프로그램을 구축하라! 

별로 큰소리로 선언하는 것도 아니지만 같은 것입니다. 그것이 Twisted 방식 이니까요. 

대부분의 Python 프로그램은 동기화 움직임 있으며, Python 모듈도 그렇습니다. 동기화 프로그램을 쓰고 있으면 즉시 다음 것을 알게합니다. 시를 받기 위하여 필요한 동기화 버전의`get_poetry`` 함수에 다음 몇 줄의 코드를 추가하여 사용할 것입니다. 
: 

     ... 
     import poetrylib # 모듈의 이름을 지정했습니다 (I just made this module name up) 
     poem = poetrylib.get_poetry (host, port) 
     ... 

그러면 우리의 방식을 계속합시다. 나중에 만약 사실시를 갖고 다니 없었다고 생각하면이 행을 맑게하면된다. 지장 없을 것입니다. 그러나 동기화 프로그램을 쓰고있어``get_poetry``의 Twisted 버전을 사용하기로 결정한 경우 프로그램을 콜백을 사용한 비동기 스타일로 재 구축하지 않으면 안됩니다. 아마 코드에 큰 변화를하지 않으면 안 될 것입니다. 프로그램을 다시 작성 같은 오류가 필요하다고 말하고있는 것은 아닙니다. 요구 사항이 주어지면 의미있는 것입니다. 그러나``import`` 행과 어떤 함수 호출을 추가하는 정도로는 쉽지 않을 것입니다. 동기와 비동기 코드는 혼합되지 않습니다. 

Twisted와 비동기 프로그래밍에 익숙하지 않은 경우 기존 코드 기반을 이식하기 전에 처음부터 Twisted의 일부 프로그램을 써 보는 것이 좋습니다. 이식하면서 한 번에 두 모드에서 생각하려고하는 불필요한 복잡성이 사라지고 Twisted를 사용에도 안심할 수있는 것입니다. 

     그러나 당신의 프로그램이 이미 비동기라면 Twisted를 사용하는 것은 훨씬 간단 할지도 모릅니다. 
     Twisted은 비교적 원활하게`pyGTK <http://pygtk.org/>`_와`pyQT <http://wiki.python.org/moin/PyQt>`_에 연결할 수 있습니다. 
     이들은 reactor 기반의 GUI 툴킷위한 Python API입니다. 

이상이 될 때 
------------------------ 
클라이언트 3.0에서는 연결이 실패했음을 감지 않습니다. 클라이언트 1.0에서 생략했을 때보다 다소 문제가 발생할 수 있습니다. 클라이언트 3.0에 존재하지 않는 서버에서시를 다운로드시켜 보면, 충돌없이 영원히 기다립니다. 그래도``clientConnectionFailed`` 콜백은 호출되므로 기본 클래스`ClientFactory <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103 >`_의 표준 구현은 아무 것도하지 않습니다. 따라서``get_poem`` 콜백이 불린다하지 않으며, reactor는 멈추지 않습니다. ": doc :`p02`"에서 만든 것 같은 아무것도하지 않는 프로그램입니다. 

분명히이 오류를 어떻게 든해야합니다. 어디서? 연결에 실패했다는 정보는`clientConnectionFailed``을 통해 팩토리 오브젝트에 제공합니다. 것으로, 거기에서 시작됩니다. 그러나,이 팩토리는 재사용 가능한 것으로 간주하고 오류를 처리하는 적절한 방법은 팩토리가 사용되는 문맥에 따라 달라집니다. 일부 응용 프로그램에서는시를 잃어 버리면 막대한 피해가 될지도 모릅니다 (시이 없다고? 충돌 같은 것일지도). 다른 경우는 그대로 계속 동작 어딘가 다른 곳에서 또 다른 구절을받을 수 있도록지도 모릅니다. 

즉,`get_poetry`` 사용자가 성공적으로 달릴 때이 아닌 이상 해져 버린 때를 알 필요가있는 것입니다. 동기화 프로그램에서는``get_poetry``이``Exception``를 생성하고 호출하는 코드는 그것을``try / except`` 구문에서 처리 할 수 ​​있도록하는 것입니다. 그러나 reactive 프로그램은 오류 상태도 비동기 적으로 제공합니다. ``get_poetry`` 함수가 처리를 반환 후까지 우리는 연결에 실패한 것조차 몰라. 

하나의 가능성을 보여합시다. 
: 

     def get_poetry (host, port, callback) : 
         "" " 
         Download a poem from the given host and port and invoke 

           callback (poem) 

         when the poem is complete. If there is a failure, invoke : 

           callback (None) 

         instead. 
         "" " 

콜백의 인수를 테스트하는 (즉``if poem is None``)하여 클라이언트는 우리가받은 여부를 결정할 수 있습니다. 클라이언트가 끝없이 계속 실행은 피할 수 있지만,이 방법은 아직 몇 가지 문제점이 있습니다. 무엇보다도 실패를 보여주기 위하여``None``를 사용하는 것은 임시 방편 많습니다. 다음``None`` 값은 매우 제한된 정보 만 전달할 수 없습니다. 무엇이 잘못되었는지 모르겠습니다. 여기에서는 디버깅에 사용할 수 있도록 추적 오브젝트를 포함 해 줍시다. 는 두 번째입니다. 
: 

     def get_poetry (host, port, callback) : 
         "" " 
         Download a poem from the given host and port and invoke 

           callback (poem) 

         when the poem is complete. If there is a failure, invoke : 

           callback (err) 

         instead, where err is an Exception instance. 
         "" " 

``Exception``를 사용하면 동기화 프로그램에서 사용한 것에 가까이 되네요. 이제 뭐가 잘못인지는 예외를 보면 잘되고``None``을 정상 값으로도 사용할 수 있습니다. 일반적으로 Python에서 예외 만났을 때 역 추적도 취득하고 나중에 디버깅하기 위해 분석하거나 로그로 내보내거나합니다. 추적 정말 편리합니다. 비동기 프로그래밍이기 때문에 그렇다고 포기해야하지 않습니다. 

콜백이 호출 된 장소에서 출력하는 추적 오브젝트를 필요로하고있는 것은 없어요. 거기는 문제가 일어난 곳이 없습니다. 우리가 정말 원하는 것은``Exception`` 인스턴스와 그 예외가 발생 된 위치에서 콜백 모두입니다 (단순히 생성 된 위치가 아니라 전달 된 장소입니다). 

Twisted에는``Exception``와 추적을 모두 포괄하는`Failure <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L121 >`_ 추상화가 있습니다. ``Failure``의`docstring <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L141>`_에서 만드는 방법을 설명하고 있습니다 . ``Failure`` 개체를 콜백에 전달하여 디버깅에 유용한 추적 정보를 저장할 수 있습니다. 

`twisted-failure / failure-examples.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-failure/failure-examples.py>`_에는``Failure`` 객체를 사용 예제가 몇 가지 있습니다. 이것을 보면``Failure``가 전달 된 예외에서 추적 정보를 저장하는 방법을 알 것이다. 비록``except`` 블록 외부의 컨텍스트이었다고해도입니다. ``Failure`` 인스턴스를 만드는 데 많은 말을 생각하지 않습니다. 파트 7에서는 Twisted 그것을 생성 해주는 것을 알 것입니다. 

그러면 세 번째입니다. 
: 

     def get_poetry (host, port, callback) : 
         "" " 
         Download a poem from the given host and port and invoke 

           callback (poem) 

         when the poem is complete. If there is a failure, invoke : 

           callback (err) 

         instead, where err is a twisted.python.failure.Failure instance. 
         "" " 

이 버전에서는 잘 움직이지 않는 경우에는``Exception``와 추적을 모두 얻을 수 있습니다. 좋네요! 

한숨의 곳입니다 만, 또 하나 문제점이 있습니다. 일반적 결과와 실패 모두에 대해 동일한 콜백을 사용하는 것은 조금 이상하네요. 일반적으로 실패에 대해서는 성공에 대한 경우와 전혀 다른 대처가 필요합니다. 동기화 버전의 Python 프로그램에서는``try / catch``에서 성공과 실패를 다른 코드로 취급합니다. 이런 식으로. 
: 

     try : 
         attempt_to_do_something_with_poetry () 
     except RhymeSchemeViolation : 
         # the code path when things go wrong 
     else : 
         # the code path when things go so, so right baby 

오류 처리에서이 형식을 유지 되길 원한다면 실패에 대해서는 별도의 코드 진행 방법시킬 필요가 있습니다. 비동기 프로그래밍, 코드의 진행 방법이 분리되어있는 것은 콜백이 분리되는 것을 의미합니다. 
: 

     def get_poetry (host, port, callback, errback) : 
         "" " 
         Download a poem from the given host and port and invoke 

           callback (poem) 

         when the poem is complete. If there is a failure, invoke : 

           errback (err) 

         instead, where err is a twisted.python.failure.Failure instance. 
         "" " 

클라이언트 3.1 
---------------- 
이번에는 적절한 오류 처리의 의미를 가진 API를 사용할 수 있기 때문에, 나머지는 그것을 구현합니다. 클라이언트 3.1은`twisted-client-3 / get-poetry-1.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py> `_이 있습니다. 변화는 지금까지의 내용 그대로입니다. `PoetryClientFactory <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66>`_는`callback``와``errback` `모두를 수용``clientConnectionFailed``를 구현합니다. 
: 

     class PoetryClientFactory (ClientFactory) : 

         protocol = PoetryProtocol 

         def __init __ (self, callback, errback) : 
             self.callback = callback 
             self.errback = errback 

         def poem_finished (self, poem) : 
             self.callback (poem) 

         def clientConnectionFailed (self, connector, reason) : 
             self.errback (reason) 

`clientConnectionFailed <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L118>`_는 연결에 실패한 이유를 설명하는``Failure` `객체 (``reason`` 인수)를 받도록 이미되어 있기 때문에,`errback``로 전달합니다. 

다른 변화는 모든 작은 것이므로, 여기에서는 설명하지 않습니다. 클라이언트 3.1은 다음과 같이 서버 이름을 붙이지 않고 포트 번호를 지정하여 테스트 할 수 있습니다. 
: 

     python twisted-client-3 / get-poetry-1.py 10004 

다음과 같은 결과를 보게 될 것입니다. 
: 

     Poem failed : Failure instance : Traceback (failure with no frames) : 
      Connection was refused by other side : 111 : Connection refused.] 

`poem_failed <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L110>`_ 노``print`` 문장의 출력입니다 . Twisted는`Exception``를 전달하는 것이 아니라 단순히 전달하기 만합니다. 따라서 여기에서는 추적하지 않습니다. 그러나 거대하지 않기 때문에 추적은 실제로는 필요 없습니다. Twisted 우리에게 알려 준 것입니다. 정확하게 그 주소에 연결할 수 없다고 

정리 
------ 
6 부에서 배운 것은 다음의 것입니다. 

* Twisted 프로그램을 위해 쓴 API는 비동기 않으면 안됩니다. 
* 비동기 코드에 동기화 코드를 혼합 할 수 없습니다. 
* 따라서 우리 자신의 코드에서 콜백을 사용하지 않으면 안됩니다. Twisted가 그렇게대로. 
* 그리고 오류를 처리하는 것도 콜백이 아니면 안됩니다. 

Twisted를 사용하여 설명하는 어떤 API에서도 추가로 두 인수 일반적인 콜백 및 오류에 대한 콜백을 포함하지 말아야할까요? 그렇게 좋은 것 같지 않습니다. 다행히 Twisted은 우리가 모두 사용하지 않아도 끝나, 게다가 추가로 몇 가지 기능을 갖게 해주 추상화가 있습니다. 이에 대해서는 ": doc :`p07`"에서 공부하고 갑시다. 


추천 연습 문제 
------------------ 
#. 지정된 시간이 경과하여도 수신하지 않으면 시간 초과하도록 클라이언트 3.1을 수정합시다. 이런 경우 자신의 예외 오류에 대한 콜백을 호출합니다. 연결 닫기 것도 잊지 말자. 
#``Failure`` 객체의`trap <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L278>`_ 방법을 학습 하십시오. 
    ``trap``와``try / except`` 문장``except`` 절을 비교하세요. 
#``clientConnectionFailed``는`get_poetry`` 처리를 반환 한 후 호출되었는지를 확인하기 위해``print`` 문을 사용하십시오.

..
    <H2>Part 6: And Then We Took It Higher
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Poetry for Everyone
    We've made a lot of progress with our poetry client. Our last version (2.0) is using Transports, Protocols, and Protocol Factories, the workhorses of Twisted networking. But there are more improvements to make. Client 2.0 (and also 2.1) can only be used for downloading poetry at the command line. This is because the <CODE>PoetryClientFactory</CODE> is not only in charge of getting poetry, but also in charge of shutting down the program when it's finished. That's an odd job for something called "<CODE>PoetryClientFactory</CODE>", it really ought to do nothing beyond making <CODE>PoetryProtocol</CODE>s and collecting finished poems.
    We need a way to send a poem to the code that requested the poem in the first place. In a synchronous program we might make an API like this:
    def get_poetry(host, post):
        """Return the text of a poem from the poetry server at the given host and port."""
    But of course, we can't do that here. The above function necessarily blocks until the poem is received in entirety, otherwise it couldn't work the way the documentation claims. But this is a reactive program so blocking on a network socket is out of the question. We need a way to tell the calling code when the poem is ready, without blocking while the poem is in transit. But this is the same sort of problem that Twisted itself has. Twisted needs to tell our code when a socket is ready for I/O, or when some data has been received, or when a timeout has occurred, etc. We've seen that Twisted solves this problem using callbacks, so we can use callbacks too:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete.
        """
    Now we have an asynchronous API we can use with Twisted, so let's go ahead and implement it.
    <P style="padding-left: 30px;">As I said before, we will at times be writing code in ways a typical Twisted programmer wouldn't. This is one of those times and one of those ways. We'll see in Parts 7 and 8 how to do this the "Twisted way" (surprise, it uses an abstraction!) but starting out simply will give us more insight into the finished version.
    <H3>Client 3.0
    You can find version 3.0 of our poetry client in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py"><TT>twisted-client-3/get-poetry.py</TT></A>. This version has an implementation of the <CODE>get_poetry</CODE> <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L77">function</A>:
    def get_poetry(host, port, callback):
        from twisted.internet import reactor
        factory = PoetryClientFactory(callback)
        reactor.connectTCP(host, port, factory)
    The only new wrinkle here is passing the callback function to the <CODE>PoetryClientFactory</CODE>. The <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L66">factory</A> uses the callback to deliver the poem:
    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback):
            self.callback = callback

        def poem_finished(self, poem):
            self.callback(poem)
    Notice the factory is much simpler than in version 2.1 since it's no longer in charge of shutting the reactor down. It's also missing the code for detecting failures to connect, but we'll fix that in a little bit. The <CODE>PoetryProtocol</CODE> itself doesn't need to change at all so we just re-use the one from client 2.1:
    class PoetryProtocol(Protocol):

        poem = ''

        def dataReceived(self, data):
            self.poem += data

        def connectionLost(self, reason):
            self.poemReceived(self.poem)

        def poemReceived(self, poem):
            self.factory.poem_finished(poem)
    With this change, the <CODE>get_poetry</CODE> function, and the <CODE>PoetryClientFactory</CODE> and <CODE>PoetryProtocol</CODE> classes, are now completely re-usable. They are all about downloading poetry and nothing else. All the logic for starting up and shutting down the reactor is in the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry.py#L90">main function</A> of our script:
    def poetry_main():
        addresses = parse_args()

        from twisted.internet import reactor

        poems = []

        def got_poem(poem):
            poems.append(poem)
            if len(poems) == len(addresses):
                reactor.stop()

        for address in addresses:
            host, port = address
            get_poetry(host, port, got_poem)

        reactor.run()

        for poem in poems:
            print poem
    So if we wanted, we could take the re-usable parts and put them in a shared module that anyone could use to get their poetry (as long as they were using Twisted, of course).
    By the way, when you're actually testing client 3.0 you might re-configure the poetry servers to send the poetry faster or in bigger chunks. Now that the client is less chatty in terms of output it's not as interesting to watch while it downloads the poems.
    <H3>Discussion
    We can visualize the callback chain at the point when a poem is delivered in Figure 11:<A name="figure11"></A>
    <DIV id="attachment_1618" class="wp-caption aligncenter" style="width: 374px"><A href="./part6_files/reactor-poem-callback.png"><IMG class="size-full wp-image-1618" title="Figure 11: the poem callbacks" src="./part6_files/reactor-poem-callback.png" alt="Figure 11: the poem callbacks" width="364" height="385"></A><P class="wp-caption-text">Figure 11: the poem callbacks</DIV>
    Figure 11 is worth contemplating. Up until now we have depicted callback chains that terminate with a single call to "our code". But when you are programming with Twisted, or any single-threaded reactive system, these callback chains might well include bits of our code making callbacks to other bits of our code. In other words, the reactive style of programming doesn't stop when it reaches code we write ourselves. In a reactor-based system, it's callbacks all the way down.
    Keep that fact in mind when choosing Twisted for a project. When you make this decision:
    <BLOCKQUOTE>I'm going to use Twisted!</BLOCKQUOTE>
    You are also making this decision:
    <BLOCKQUOTE>I'm going to structure my program as a series of asynchronous callback chain invocations powered by a reactor loop!</BLOCKQUOTE>
    Now maybe you won't exclaim it out loud the way I do, but it is nevertheless the case. That's how Twisted works.
    It's likely that most Python programs are synchronous and most Python modules are synchronous too. If we were writing a synchronous program and suddenly realized it needed some poetry, we might use the synchronous version of our <CODE>get_poetry</CODE> function by adding a few lines of code to our script like these:
    ...
    import poetrylib # I just made this module name up
    poem = poetrylib.get_poetry(host, port)
    ...
    And continue on our way. If, later on, we decided we didn't really want that poem after all then we'd just snip out those lines and no one would be the wiser. But if we were writing a synchronous program and then decided to use the Twisted version of <CODE>get_poetry</CODE>, we would need to re-architect our program in the asynchronous style using callbacks. We would probably have to make significant changes to the code. Now, I'm not saying it would necessarily be a mistake to rewrite the program. It might very well make sense to do so given our requirements. But it won't be as simple as adding an <CODE>import</CODE> line and an extra function call. Simply put, synchronous and asynchronous code do not mix.
    If you are new to Twisted and asynchronous programming, I might recommend writing a few Twisted programs from scratch before you attempt to port an existing codebase. That way you will get a feel for using Twisted without the extra complexity of trying to think in both modes at once as you port from one to the other.
    <P style="padding-left: 30px;">If, however, your program is already asynchronous then using Twisted might be much easier. Twisted integrates relatively smoothly with <A href="http://pygtk.org/">pyGTK</A> and <A href="http://wiki.python.org/moin/PyQt">pyQT</A>, the Python APIs for two reactor-based GUI toolkits.
    <H3>When Things Go Wrong
    In client 3.0 we no longer detect a failure to connect to a poetry server, an omission which causes even more problems than it did in client 1.0. If we tell client 3.0 to download a poem from a non-existent server then instead of crashing it just waits there forever. The <CODE>clientConnectionFailed</CODE> callback still gets called, but the default implementation in the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103"><CODE>ClientFactory</CODE></A> base class doesn't do anything at all. So the <CODE>got_poem</CODE> callback is never called, the reactor is never stopped, and we've got another do-nothing program like the ones we made in <A href="http://krondo.com/blog/?p=1247">Part 2</A>.
    Clearly we need to handle this error, but where? The information about the failure to connect is delivered to the factory object via <CODE>clientConnectionFailed</CODE> so we'll have to start there. But this factory is supposed to be re-usable, and the proper way to handle an error will depend on the context in which the factory is being used. In some applications, missing poetry might be a disaster (No poetry?? Might as well just crash). In others, maybe we just keep on going and try to get another poem from somewhere else.
    In other words, the users of <CODE>get_poetry</CODE> need to know when things go wrong, not just when they go right. In a synchronous program, <CODE>get_poetry</CODE> would raise an <CODE>Exception</CODE> and the calling code could handle it with a <CODE>try</CODE>/<CODE>except</CODE> statement. But in a reactive program, error conditions have to be delivered asynchronously, too. After all, we won't even find out the connection failed until after <CODE>get_poetry</CODE> returns. Here's one possibility:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(None)

        instead.
        """
    By testing the callback argument (i.e., <CODE>if poem is None</CODE>) the client can determine whether we actually got a poem or not. This would suffice for our client to avoid running forever, but that approach still has some problems. First of all, using <CODE>None</CODE> to indicate failure is somewhat ad-hoc. Some asynchronous APIs might want to use <CODE>None</CODE> as a default return value instead of an error condition. Second, a <CODE>None</CODE> value carries a very limited amount of information. It can't tell us what went wrong, or include a traceback object we can use in debugging. Ok, second try:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is an Exception instance.
        """
    Using an <CODE>Exception</CODE> is closer to what we are used to with synchronous programming. Now we can look at the exception to get more information about what went wrong and <CODE>None</CODE> is free for use as a regular value. Normally, though, when we encounter an exception in Python we also get a traceback we can analyze or print to a log for debugging at some later date. Tracebacks are extremely useful so we shouldn't give them up just because we are using asynchronous programming.
    Keep in mind we don't want a traceback object for the point where our callback is invoked, that's not where the problem happened. What we really want is both the <CODE>Exception</CODE> instance and the traceback from the point where that exception was raised (assuming it was raised and not simply created).
    Twisted includes an abstraction called a <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L121"><CODE>Failure</CODE></A> that wraps up both an <CODE>Exception</CODE> and the traceback, if any, that went with it. The <CODE>Failure</CODE> <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L141">docstring</A> explains how to create one. By passing <CODE>Failure</CODE> objects to callbacks we can preserve the traceback information that's so handy for debugging.
    There is some example code that uses <CODE>Failure</CODE> objects in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-failure/failure-examples.py"><TT>twisted-failure/failure-examples.py</TT></A>. It shows how <CODE>Failure</CODE>s can preserve the traceback information from a raised exception, even outside the context of an <CODE>except</CODE> block. We won't dwell too much on making <CODE>Failure</CODE> instances. In Part 7 we'll see that Twisted generally ends up making them for us.
    Alright, third try:
    def get_poetry(host, port, callback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          callback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """
    With this version we get both an <CODE>Exception</CODE> and possibly a traceback record when things go wrong. Nice.
    We're almost there, but we've got one more problem. Using the same callback for both normal results and failures is kind of odd. In general, we need to do quite different things on failure than on success. In a synchronous Python program we generally handle success and failure with two different code paths in a <CODE>try</CODE>/<CODE>except</CODE> statement like this:
    try:
        attempt_to_do_something_with_poetry()
    except RhymeSchemeViolation:
        # the code path when things go wrong
    else:
        # the code path when things go so, so right baby
    If we want to preserve this style of error-handling, then we need to use a separate code path for failures. In asynchronous programming a separate code path means a separate callback:
    def get_poetry(host, port, callback, errback):
        """
        Download a poem from the given host and port and invoke

          callback(poem)

        when the poem is complete. If there is a failure, invoke:

          errback(err)

        instead, where err is a twisted.python.failure.Failure instance.
        """
    <H3>Client 3.1
    Now that we have an API with reasonable error-handling semantics we can implement it. Client 3.1 is located in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py"><CODE>twisted-client-3/get-poetry-1.py</CODE></A>. The changes are pretty straightforward. The <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66"><CODE>PoetryClientFactory</CODE></A> gets both a <CODE>callback</CODE> and an <CODE>errback</CODE>, and now it implements <CODE>clientConnectionFailed</CODE>:
    class PoetryClientFactory(ClientFactory):

        protocol = PoetryProtocol

        def __init__(self, callback, errback):
            self.callback = callback
            self.errback = errback

        def poem_finished(self, poem):
            self.callback(poem)

        def clientConnectionFailed(self, connector, reason):
            self.errback(reason)
    Since <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L118"><CODE>clientConnectionFailed</CODE></A> already receives a <CODE>Failure</CODE> object (the <CODE>reason</CODE> argument) that explains why the connection failed, we just pass that along to the <CODE>errback</CODE>.
    The other changes are all of a piece so I won't bother posting them here. You can test client 3.1 by using a port with no server like this:
    python twisted-client-3/get-poetry-1.py 10004
    And you'll get some output like this:
    Poem failed: [Failure instance: Traceback (failure with no frames): : Connection was refused by other side: 111: Connection refused.
    ]
    That's from the <CODE>print</CODE> statement in our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L110"><CODE>poem_failed</CODE></A> errback. In this case, Twisted has simply passed us an <CODE>Exception</CODE> rather than raising it, so we don't get a traceback here. But a traceback isn't really needed since this isn't a bug, it's just Twisted informing us, correctly, that we can't connect to that address.
    <H3>Summary
    Here's what we've learned in Part 6:
    <UL>
    * The APIs we write for Twisted programs will have to be asynchronous.
    * We can't mix synchronous code with asynchronous code.
    * Thus, we have to use callbacks in our own code, just like Twisted does.
    * And we have to handle errors with callbacks, too.
    </UL>
    Does that mean every API we write with Twisted has to include two extra arguments, a callback and an errback? That doesn't sound so nice. Fortunately, Twisted has an abstraction we can use to eliminate both those arguments and pick up a few extra features in the bargain. We'll learn about it in <A href="http://krondo.com/blog/?p=1682">Part 7</A>.
    <H3>Suggested Exercises
    <OL>
    * Update client 3.1 to timeout if the poem isn't received after a given period of time. Invoke the errback with a custom exception in that case. Don't forget to close the connection when you do.
    * Study the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py#L278"><CODE>trap</CODE></A> method on <CODE>Failure</CODE> objects. Compare it to the <CODE>except</CODE> clause in the <CODE>try</CODE>/<CODE>except</CODE> statement.
    * Use <CODE>print</CODE> statements to verify that <CODE>clientConnectionFailed</CODE> is called after <CODE>get_poetry</CODE> returns.
    </OL>
