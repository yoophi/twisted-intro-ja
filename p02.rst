=============================== 
2 부 : 느긋한시와 세기말 
=============================== 

이 부분에서는 ": doc :`p01`"로 시작한 입문 한 벌을 진행하고 있습니다. 만약 읽는다면 환영 돌아와 주었어요. 드디어 자신의 손을 움직여 코드를 작성하겠습니다. 하지만 우선은 조금 탈선하여 상정하고있는 것을 공유하고 둡시다. 

상정하고있는 독자 
---------------- 
Python에서 동기화 프로그램을 쓰는 기초 지식을 지니고 있고, Python의 소켓 프로그래밍에 대해 조금 알고있는 것으로 생각하고 있습니다. 만약 소켓을 사용한 적이 없다면 우선`소켓 모듈의 문서 <http://docs.python.org/library/socket.html#module-socket>`_ 특히 마지막으로 코드 예제에 눈 을 통해두면 좋을 것입니다. Python을 사용한 적이 없으면 나머지는 보얏 한 것이되어 버리는 것입니다. 

상정하고있는 독자의 컴퓨터 
------------------------------ 
내가 Twisted를 사용하여 온 것은 주로 Linux에서이며, 코드 예제도 Linux에서 만들었습니다. 의도적으로 Linux 애착 코드에있는 생각은 없지만, Linux 및 Unix와 같은 (Mac OSX 나 FreeBSD 등) 시스템에서만 작동하지 않을 수 있을지도 모릅니다. Windows는 특이한 있기 때문에, 당신이 Windows에서 작업 있어도 기분 이외는 도움이 될 수 없습니다. 

기계는 비교적 최근`Python <http://python.org/download>`_와`Twisted <http://twistedmatrix.com/trac/wiki/Downloads>`_을 설치 한 것으로합니다 . 예제의 코드는 Python 2.5과 Twisted 8.2.0에서 개발했습니다. 

모든 예는 네트워크를 통해 설정할 수 있지만 단일 시스템에서 실행시킬 수 있습니다. 비동기 프로그래밍의 기본 구조를 학습하기 위해서는 단일 컴퓨터가 좋습니다. 

코드 예제를 구하는 
-------------- 
코드 예제는`zip <http://github.com/jdavisp3/twisted-intro/zipball/master>`_ 나`tar <http://github.com/jdavisp3/twisted-intro/tarball/master>`_ 거나`내 공개 git 저장소 <http://github.com/jdavisp3/twisted-intro/tree/master>`_을`clone하는 <git : //github.com/jdavisp3/twisted-intro.git >`_하여 사용할 수 있습니다. `git <http://git-scm.com/>`_ 또는 git 저장소를 읽을 수있게 버전 관리 시스템을 사용하고 있다면, 여기의 방법을 권장합니다. 미래에 코드 예제를 업데이트 해 나가고 있으며, 당신도 최신 상태를 유지하기 쉽고 되니까요. 게다가 그림을 만드는 데 사용한 SVG 파일도 있습니다. 다음 git 명령에서 저장소를 clone하십시오. 
: 

     git clone git : //github.com/jdavisp3/twisted-intro.git 

이상에서 최신 코드 예제가 최상위 디렉토리를 연 쉘이 다수있는 것으로합니다. (그 중 하나는 README를 열어 두십시오) 

느긋한시 
-------------- 
CPU는 네트워크보다 훨씬 빠르지 만 그래도 대부분의 네트워크는 당신의 머리가 사물을 생각보다 빠르다 있으며, 적어도 눈으로 쫓을보다 빠릅니다. 따라서 "CPU에서 본"네트워크 지연을 확인하는 것은 어려운 문제가 될 수 있습니다. 컴퓨터가 한 대 밖에없고, 바이트가`루프백 인터페이스 <http://en.wikipedia.org/wiki/Loopback>`_를 최고 속도로 달려 나가는 경우 특히 그렇습니다. 인간이 알 수있는 인위적인 지연을 가진 느린 서버가 필요합니다. 서버는 어떤 것을 제공하지 않으면 안됩니다 때문에,시를 제공하기로합시다. 코드 예제는 "``poetry``"라는 하위 디렉토리가 있습니다. `John Donne <http://en.wikipedia.org/wiki/Donne>`_`WB Yeats <http://en.wikipedia.org/wiki/Yeats>`_`Edgar Allen Poe <http : / /en.wikipedia.org/wiki/Poe>`_의 각 구절을 하나씩 포함되어 있습니다. 물론 당신 취향의시를 바꿔달라고 상관 없어요. 

기본적인 느긋한시 서버는`blocking-server / slowpoetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/blocking-server/slowpoetry.py>`_에서 구현하고 있습니다. 다음과 같이 인스턴스를 시작할 수 있습니다. 
: 

     python blocking-server / slowpoetry.py poetry / ecstasy.txt 

이 명령은 John Donne의시 인 'Ecstasy'을 발송 차단 서버를 시작합니다. 조금 블로킹 서버의 소스 코드를 들여다 보자. 보면 알 수 있듯이, Twisted를 사용하지 않고 기본적인 Python 소켓 작업입니다. 한 번에 어느 정도의 바이트 수 밖에 발송하고, 그 간격은 같은 단지의 지연이 있습니다. 기본적으로 0.1 초마다 10 바이트를 발송하지만 명령 줄``--num-bytes``와``--delay`` 옵션 매개 변수를 변경할 수 있습니다. 예를 들어, 5 초마다 50 바이트를 쓰기 위해서는 다음과 같이합니다. 
: 

     python blocking-server / slowpoetry.py --num-bytes 50 --delay 5 poetry / ecstasy.txt 

서버는 시작할 때 수신 포트 번호를 출력합니다. 기본적으로 시스템에서 사용 가능한 임의의 포트를 사용합니다. 설정을 바꾸고 시작하면 클라이언트 명령을 조정해야 없도록 동일한 포트 번호를 사용하는 것이 좋습니다. 다음과 같이하면 특정 포트 번호를 지정할 수 있습니다. 
: 

     python blocking-server / slowpoetry.py --port 10000 poetry / ecstasy.txt 

`netcat <http://netcat.sourceforge.net/>`_ [*] _ 프로그램을 사용할 경우 다음과 같이 테스트 할 수 있습니다. 
: 

     netcat localhost 10000 

.. [*] 역주 : 명령 이름이``netcat`` 대신``nc`` 처리 계도 있을지도 모릅니다. 

서버가 동작하고 있으면,시 화면에 천천히 흘러 나오는 것입니다. 스고이! (역주 : Ecstasy!와 걸 하니까 영어라면 재미라는 농담) 또한 서버가 바이트를 전송 할 때마다 한 줄씩 출력하고있는 것을 알 수 있습니다. 전체시를 보내 잘라 버리면, 서버는 접속을 끊습니다. 

기본적으로 서버는 자신의 컴퓨터의 "루프백"인터페이스를 listen하고있을뿐입니다. 만약 다른 컴퓨터에서 서버에 연결하려면``--iface`` 옵션 listen 할 인터페이스를 지정할 수 있습니다.

서버가 각 구절을 천천히 발송뿐만 아니라 소스 코드를 읽고, 서버가 클라이언트에시를 보내고있는 동안은 다른 모든 클라이언트는 클라이언트시를 보내 탈 때까지 기다려야한다 것을 알까요? 정말 여유로운 서버이므로, 학습 이외는 특히 도움이되지 않는 것입니다. 

     ** 정말일까요? ** 
     한편,`Peak Oil <http://www.peakoil.net/>`_ 더 비관적 인 사람들이 제대로 실제는 세계적인 에너지 위기와 지구 온난화에 향하고 있다고하면, 
     머지 않은 미래에는 아마 대역을 먹지 않고 저전력 poetry server가 우리에게 필요하게 될지도 모릅니다. 
     상상해보십시오. 오랫동안 자신이 만족할만한 정원 손질에 몰두 자신의 옷을 만들어 지역의 자치회에 봉사하고 
     세기말 이후의 황폐 한 상태를 전전하는 매우 섬세한 무기력 인간 (역주 : zombie. 바이러스에 감염된 컴퓨터의 수 있을지도 모르고 정체 모를 것일지도)을 격퇴하면서 지내온 후 
     당신의 발생기 (역주 :시를 발송 서버의 수)을 시작하여 소실되어 버린 문명에서 고급 문화의 행을 다운로드 할 수 있을지도 모릅니다. 이 때야 말로 우리의 작은 서버가 그 의의를 발휘하는 때입니다. 

블로킹 클라이언트 
------------------------ 
코드 예제는 여러 서버에서 계속해서시를 얻을 수 블로킹 클라이언트도 있습니다. 파트 1 ": ref :`figure1`"에서 설명한대로 클라이언트에 세 작업을 수행시켜 보자. 우선 세 서버를 실행시켜 별도의시를 발송합니다. 세 별도의 터미널 창에서 다음 명령을 실행하십시오. 
: 

     python blocking-server / slowpoetry.py --port 10000 poetry / ecstasy.txt --num-bytes 30 
     python blocking-server / slowpoetry.py --port 10001 poetry / fascination.txt 
     python blocking-server / slowpoetry.py --port 10002 poetry / science.txt 

당신의 시스템에서 위의 포트 번호가 이미 사용되고있는 같이 인 다른 포트 번호로해도 상관 없습니다. 첫 번째 서버는 기본 10 바이트 대신 30 바이트 씩하고있는 점에 유의하십시오. 이시는 다른 것에 비해 세 배 정도의 길이가 있기 때문입니다. 이렇게 해두면, 대체로 같은 정도의 타이밍에 끝나게됩니다. 

그래서시를 얻기 위해`blocking-client / get-poetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/blocking-client/get-poetry.py>`_의 블로킹 클라이언트를 사용합시다. 다음과 같이하여 클라이언트를 실행합니다. 
: 

     python blocking-client / get-poetry.py 10000 10001 10002 

서버 설정에 따라 포트 번호를 바꾸십시오. 이것은 블로킹 클라이언트이므로 완전한시를받을 때까지 기다 다음시를 시작할 것을 기다리면서 각각의 포트 번호에서 번갈아 다운로드 것이다. 시를 출력하는 대신 블로킹 클라이언트는 다음 출력을 생성합니다. 
: 

     Task 1 : get poetry from : 127.0.0.1:10000 
     Task 1 : got 3003 bytes of poetry from 127.0.0.1:10000 in 0 : 00 : 10.126361 
     Task 2 : get poetry from : 127.0.0.1:10001 
     Task 2 : got 623 bytes of poetry from 127.0.0.1:10001 in 0 : 00 : 06.321777 
     Task 3 : get poetry from : 127.0.0.1:10002 
     Task 3 : got 653 bytes of poetry from 127.0.0.1:10002 in 0 : 00 : 06.617523 
     Got 3 poems in 0 : 00 : 23.065661 

기본적으로 이것은 ": ref :`figure1`"텍스트 버전으로 각각의 작업은 하나의시를 다운로드하는 것입니다. 당신의 환경은 조금 다를지도 모르고 서버의 타이밍 파라미터를 변경하면 달라질 것입니다. 매개 변수를 변경하여보고, 시간에 미치는 영향을 확인하여보십시오. 

차단 서버와 클라이언트 소스 코드에 눈을 통해 네트워크 데이터를 송수신하는 부분이 소스 코드의 어디 쯤에있는 알았다 있을까요? 

비동기 클라이언트 
------------------ 
그럼 Twisted없이 쓴 간단한 비동기 클라이언트를 살펴 보자. 일단 움직여 봅시다. 조금 전과 동일한 포트에서 세 개의 서버가 작동하는 것으로합니다. 방금 전 기동 한 것이 움직이고 있으면 그대로 두십시오. 비동기 클라이언트 (`async-client / get-poetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/async-client/get-poetry.py>`_에 있음)는 다음 같이 실행합니다. 
: 

     python async-client / get-poetry.py 10000 10001 10002 

이런 느낌의 출력이 될 것입니다. 
: 

     Task 1 : got 30 bytes of poetry from 127.0.0.1:10000 
     Task 2 : got 10 bytes of poetry from 127.0.0.1:10001 
     Task 3 : got 10 bytes of poetry from 127.0.0.1:10002 
     Task 1 : got 30 bytes of poetry from 127.0.0.1:10000 
     Task 2 : got 10 bytes of poetry from 127.0.0.1:10001 
     ... 
     Task 1 : 3003 bytes of poetry 
     Task 2 : 623 bytes of poetry 
     Task 3 : 653 bytes of poetry 
     Got 3 poems in 0 : 00 : 10.133169 

이번에는 출력이 조금 길어지고 있습니다. 비동기 클라이언트는 서버에서 다운로드 할 때마다 행을 출력하고 느긋한시 서버는 조금씩 바이트를 발송하고 있기 때문입니다. 파트 1 ": ref :`figure3`"처럼 개별 작업이 동일시에 정리하고있는 것에주의하십시오. 

어떻게 비동기 클라이언트가 빠른 서버에 뒤지지 않고 그대로 느린 서버의 속도에 맞게 자동으로 조정하는지 확인하기 위해 서버 지연 설정을 바꾸어 (예를 들어, 서버를 다른 서버보다 늦게 본다 라든가)보십시오. 이것이 비동기의 묘미입니다. 

모든시를 얻기 위해 (위의 서버 설정의 경우) 비동기 클라이언트는 10 초 정도에서 종료하는데, 동기화 클라이언트는 23 초 정도 걸리는 것에주의하십시오. 파트 1 ": ref :`figure3`"와 ": ref :`figure4`"의 차이를 기억하십시오. 차단 시간이별로 없기 때문에 비동기 클라이언트는 전체적으로 짧은 시간에 모든 구절을 다운로드 할 수 있습니다. 확실히 비동기 클라이언트에서도 블록은 발생하고 있습니다. 느긋한 서버는 늦습니다. 단순히 비동기 클라이언트는 모든 서버에 대한 대응을 전환 때문에 차단 클라이언트에 비해 차단 시간에 많이 지출뿐만 아니라. 

     기술적 인 것을 말하면 비동기 클라이언트는 차단 작업을 수행하고 있습니다. 
     표준 출력 파일 기술자에``print`` 문장으로 써 내고 있습니다. 이 예에서는 이것은 문제가되지 않습니다. 
     ``print`` 문장의 출력을 항상 받아주는 단말의 로컬 컴퓨터에서 실제로 차단하지 것이고, 서버의 느림에 비하면 빠르게 실행됩니다. 
     그러나 프로그램을 파이프 라인 처리의 일부분으로 그 안에서 비동기 적으로 처리하려면 표준 입출력을위한 비동기 입출력을 사용할 필요가있을 것입니다. 
     Twisted는이 기능을 지원하고 있습니다 만, 전체를 단순화하고 유지하기 위하여``print`` 문장을 사용합니다. 앞으로의 Twisted를 이용한 프로그램도 그래요. 

자세히 
------------ 
그럼 비동기 클라이언트의 소스 코드를 읽어보십시오. 비동기와 동기의 주요 차이에주의하십시오. 

# 비동기 클라이언트는 한 번에 하나의 서버에 연결하는 것이 아니라 한꺼번에 모든 서버에 연결합니다. 
#``setblocking (0)``호출에서 통신에 사용되는 소켓 객체는 비 차단 모드가 있습니다. 
#`select <http://docs.python.org/library/select.html#module-select>`_ 모듈``select`` 메소드를 사용하면 소켓이 하등의 데이터를받을 때까지 기다리 있습니다. 
#. 서버에서 데이터를 읽어 들일 때는 소켓이 차단까지 읽을 정도 밖에로드하지 않고 읽기 할 데이터가있는 소켓에 처리를 옮깁니다 (있는 경우). 이것은 각각의 서버에서 그 시점까지받은시의 내용을 관리 계속하지 않으면 안되는 것을 의미합니다. 

비동기 클라이언트에서 핵심 부분은`get_poetry`` 함수의 최상위 루프입니다. 이 루프는 다음 단계로 분해 할 수 있습니다. 

#``select``를 사용하여 하나 이상의 소켓이 읽기 할 데이터를 갖게 될 때까지 모든 유효한 소켓을 기다리고 있습니다. 
#. 읽어야 데이터가있는 각각의 소켓에 데이터를로드합니다. 그러나 당시에 유효한 단지 데이터 만 읽지 않습니다. `차단해서는 안됩니다 <http://en.wikipedia.org/wiki/Asynchronous_I/O>`_. 
# 모든 소켓이 닫힐 때까지 반복합니다. 

동기화 클라이언트에도 (``main`` 함수 안에) 루프는있었습니다 만, 각각의 반복에서 하나의시를 완전히 다운로드했습니다. 비동기 클라이언트의 반복 처리에서는 부분적으로 다운로드하지 않습니다. 그리고 한 반복에서 어떤시를 다루고 있는지, 얼마나 많은 데이터 량을 받을지 모릅니다. 이들은 모든 서버의 상대적인 속도와 네트워크 상태에 달려 있습니다. 어떤 소켓에서 처리하는 방법을``select``에 배웠 차단하지 않도록 각각의 소켓에서 데이터를 읽게하려면 외부 아닙니다. 

동기화 클라이언트가 항상 일정한 수의 서버 (예를 들어 세)와 통신하고 있다면, 바깥 쪽 루프가 전혀 필요 없게``get_poetry`` 함수를 차례로 세 번 호출 만하면됩니다. 그러나 비동기 클라이언트에서는 외부 루프를 제거 할 수는 없습니다. 비동기의 장점을 살리기 위해 모든 소켓을 기다려 그때 그때의 반복 처리로 읽을 만의 데이터에 대해 작업을 진행하지 않으면 안됩니다. 

이벤트가 발생하기를 기다리고 그것을 처리하는 루프의 사용법은 이른바 디자인 패턴에서`reactor pattern <http://en.wikipedia.org/wiki/Reactor_pattern>`_입니다. 다음 그림 5와 같이 나타낼 수 있습니다. 

.. _figure5 : 

.. figure :: images / p02_reactor-1.png 

    그림 5 : 동기화 모델 

이벤트를 기다리고 처리를 실시하므로 루프는 "reactor"입니다. 이벤트 루프라고도합니다. reactive system은 입출력을 기다리는 경우가 많기 때문에 이러한 루프는`select loops <http://en.wikipedia.org/wiki/Asynchronous_I/O#Select.28.2Fpoll.29_loops>`_라고도합니다. ``select``의 호출은 입출력을 기다리는 데 사용되기 때문입니다. ``select`` 루프는 "이벤트"는 소켓이 읽기 - 쓰기가 가능하게되었을 때입니다. 입출력을 기다리는 방법은`select``뿐만 아니라는 점에주의하십시오. 단순히 옛부터있는 방법 (그러므로 널리 사용) 것뿐입니다. 다른 운영 체제에서 사용할 수``select``와 같은 수있어 (바라건대) 더 나은 성과를 가져다주는 새로운 API도 몇 가지 있습니다. 그러나 성능에 눈을 つむれ하면 상관 없음 같은 것입니다. 소켓의 집합 (실제로는 파일 디스크립터)를 받아 하나 이상이 입출력 준비가 될 때까지 차단하는 것입니다. 

     ``select``과 그 종류를 사용하여 블록하지 않고 파일 디스크립터 집합이 입출력의 준비가되어 있는가? 간단하게 확인할 수 있습니다. 
     이 기능은 reactive system이 루프에서 입출력을 가지지 않고 작동 할 수 있도록 해줍니다. 
     그러나 reactive systems는 모든 처리가 입출력에 억제되어 버리는 경우가 종종 있으므로 모든 파일 디스크립터를 차단함으로써 CPU 자원을 절약 할 수 있습니다. 

정확한 말하면, 여기에 나와있는 비동기 클라이언트에서 루프 reactor pattern이 없습니다. 루프의 논리가시 서버에 특유하다 "비즈니스 로직"과 분리되어 있지 않기 때문입니다. 전체 얼룩진 있습니다. reactor pattern의 현실적인 구현에서는 루프를 다음과 같은 기능을 가진 추상으로 나눌 것입니다. 

# 입출력을 감시 할 파일 디스크립터 집합을받습니다. 
# 파일 디스크립터가 입출력 준비되어있는 것을 반복 알립니다. 

그리고 정말 좋은 reactor pattern의 구현은 다음과 같은 기능을 가지는 것입니다. 

#. 다른 시스템에서 출현하는 모든 이상한 경우를 취급합니다. 
#. reactor를 최소한의 노력으로 사용할 수 있도록 해주는 많은 기쁜 추상화를 제공합니다. 
# 자유로운 발상으로 사용할 수있는, 잘 알려진 프로토콜의 구현을 제공합니다. 

이것이 바로 Twisted입니다. 강력하고 크로스 플랫폼 Reactor Pattern 및 더 많은 것을 구현입니다. ": doc :`p03`"는 Twisted 버전 Get Poetry Now를 향해 간단한 Twisted의 플러그 램을 여러 써서갑니다. 

추천 연습 문제 
------------------ 

#. 서버의 수와 설정을 바꾸어 차단 비동기 클라이언트에서 일부 시간을 실험 해보기. 
# 비동기 클라이언트에서시의 내용을 반환하는``get_poetry`` 함수를 제공 할 수 있을까요? 이유는? 
# 비동기 클라이언트에서 유사한 방법으로 (그래도 비동기 적으로) 움직인다``get_poetry`` 함수를 갖고있을 때, 인수와 반환 값은 어떤 것이 될까요?

..
    <H2>Part 2: Slow Poetry and the Apocalypse
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. And if you read it, welcome back. Now we're going to get our hands dirty and write some code. But first, let's get some assumptions out of the way.
    <H3>My Assumptions About You
    I will proceed as if you have a basic working knowledge of writing synchronous programs in Python, and know at least a little bit about Python socket programming. If you have never used sockets before, you might read the <A href="http://docs.python.org/library/socket.html#module-socket">socket module documentation</A> now, especially the example code towards the end. If you've never used Python before, then the rest of this introduction is probably going to be rather opaque.
    <H3>My Assumptions About Your Computer
    My experience with Twisted is mainly on Linux systems, and it is a Linux system on which I developed the examples. And while I won't intentionally make the code Linux-dependent, some of it, and some of what I say, may only apply to Linux and other UNIX-like systems (like Mac OSX or FreeBSD). Windows is a strange, murky place and, if you are hacking in it, I can't offer you much more beyond my heartfelt sympathies.
    I will assume you have installed relatively recent versions of <A href="http://python.org/download">Python</A> and <A href="http://twistedmatrix.com/trac/wiki/Downloads">Twisted</A>. The examples were developed with Python 2.5 and Twisted 8.2.0.
    Also, you can run all the examples on a single computer, although you can configure them to run on a network of systems as well. But for learning the basic mechanics of asynchronous programming, a single computer will do fine.
    <H3>Getting the example code
    The example code is available as a <A href="http://github.com/jdavisp3/twisted-intro/zipball/master">zip</A> or <A href="http://github.com/jdavisp3/twisted-intro/tarball/master">tar</A> file or as a <A href="git://github.com/jdavisp3/twisted-intro.git">clone</A> of my <A href="http://github.com/jdavisp3/twisted-intro/tree/master">public git repository</A>. If you can use <A href="http://git-scm.com/">git</A> or another version control system that can read git repositories, then I recommend using that method as I will update the examples over time and it will be easier for you to stay current. As a bonus, it includes the SVG source files used to generate the figures. Here is the git command to clone the repository:
    git clone git://github.com/jdavisp3/twisted-intro.git
    The rest of this tutorial will assume you have the latest copy of the example code and you have multiple shells open in its top-level directory (the one with the README file).
    <H3>Slow Poetry
    Although CPUs are much faster than networks, most networks are still a lot faster than your brain, or at least faster than your eyeballs. So it can be challenging to get the "cpu's-eye-view" of network latency, especially when there's only one machine and the bytes are whizzing past at full speed on the <A href="http://en.wikipedia.org/wiki/Loopback">loopback interface</A>. What we need is a slow server, one with artificial delays we can vary to see the effect. And since servers have to serve something, ours will serve poetry. The example code includes a sub-directory called "<TT>poetry</TT>" with one poem each by <A href="http://en.wikipedia.org/wiki/Donne">John Donne</A>, <A href="http://en.wikipedia.org/wiki/Yeats">W.B. Yeats</A>, and <A href="http://en.wikipedia.org/wiki/Poe">Edgar Allen Poe</A>. Of course, you are free to substitute your own poems for the server to dish up.
    The basic slow poetry server is implemented in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/blocking-server/slowpoetry.py">blocking-server/slowpoetry.py</A>. You can run one instance of the server like this:
    python blocking-server/slowpoetry.py poetry/ecstasy.txt
    That command will start up the blocking server with John Donne's poem "Ecstasy" as the poem to serve. Go ahead and look at the source code to the blocking server now. As you can see, it does not use Twisted, only basic Python socket operations. It also sends a limited number of bytes at a time, with a fixed time delay between them. By default, it sends 10 bytes every 0.1 seconds, but you can change these parameters with the –num-bytes and –delay command line options. For example, to send 50 bytes every 5 seconds:
    python blocking-server/slowpoetry.py --num-bytes 50 --delay 5 poetry/ecstasy.txt
    When the server starts up it prints out the port number it is listening on. By default, this is a random port that happens to be available on your machine. When you start varying the settings, you will probably want to use the same port number over again so you don't have to adjust the client command. You can specify a particular port like this:
    python blocking-server/slowpoetry.py --port 10000 poetry/ecstasy.txt
    If you have the <A href="http://netcat.sourceforge.net/">netcat</A> program available, you could test the above command like this:
    netcat localhost 10000
    If the server is working, you will see the poem slowly crawl its way down your screen. Ecstasy! You will also notice the server prints out a line each time it sends some bytes. Once the complete poem has been sent, the server closes the connection.
    By default, the server only listens on the local "loopback" interface. If you want to access the server from another machine, you can specify the interface to listen on with the –iface option.
    Not only does the server send each poem slowly, if you read the code you will find that while the server is sending poetry to one client, all other clients must wait for it to finish before getting even the first line. It is truly a slow server, and not much use except as a learning device.
    <H5 style="padding-left: 30px;">Or is it?
    <P style="padding-left: 30px;">On the other hand, if the more pessimistic of the <A href="http://www.peakoil.net/">Peak Oil</A> folks are right and our world is heading for a global energy crisis and planet-wide societal meltdown, then perhaps one day soon a low-bandwidth, low-power poetry server could be just what we need. Imagine, after a long day of tending your self-sufficient gardens, making your own clothing, serving on your commune's Central Organizing Committee, and fighting off the radioactive zombies that roam the post-apocalyptic wastelands, you could crank up your generator and download a few lines of high culture from a vanished civilization. That's when our little server will really come into its own.
    <H3>The Blocking Client
    Also in the example code is a blocking client which can download poems from multiple servers, one after another. Let's give our client three tasks to perform, as in <A href="http://dpeticol.webfactional.com/blog/?p=1209#figure1">Figure 1</A> from Part 1. First we'll start three servers, serving three different poems. Run these commands in three different terminal windows:
    python blocking-server/slowpoetry.py --port 10000 poetry/ecstasy.txt --num-bytes 30
    python blocking-server/slowpoetry.py --port 10001 poetry/fascination.txt
    python blocking-server/slowpoetry.py --port 10002 poetry/science.txt
    You can choose different port numbers if one or more of the ones I chose above are already being used on your system. Note I told the first server to use chunks of 30 bytes instead of the default 10 since that poem is about three times as long as the others. That way they all finish around the same time.
    Now we can use the blocking client in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/blocking-client/get-poetry.py"><TT>blocking-client/get-poetry.py</TT></A> to grab some poetry. Run the client like this:
    python blocking-client/get-poetry.py 10000 10001 10002
    Change the port numbers here, too, if you used different ones for your servers. Since this is the blocking client, it will download one poem from each port number in turn, waiting until a complete poem is received until starting the next. Instead of printing out the poems, the blocking client produces output like this:
    Task 1: get poetry from: 127.0.0.1:10000
    Task 1: got 3003 bytes of poetry from 127.0.0.1:10000 in 0:00:10.126361
    Task 2: get poetry from: 127.0.0.1:10001
    Task 2: got 623 bytes of poetry from 127.0.0.1:10001 in 0:00:06.321777
    Task 3: get poetry from: 127.0.0.1:10002
    Task 3: got 653 bytes of poetry from 127.0.0.1:10002 in 0:00:06.617523
    Got 3 poems in 0:00:23.065661
    This is basically a text version of <A href="http://dpeticol.webfactional.com/blog/?p=1209#figure1">Figure 1</A>, where each task is downloading a single poem. Your times may be a little different, and will vary as you change the timing parameters of the servers. Try changing those parameters to see the effect on the download times.
    You might take a look at the source code to the blocking server and client now, and locate the points in the code where each blocks while sending or receiving network data.
    <H3>The Asynchronous Client
    Now let's take a look at a simple asynchronous client written without Twisted. First let's run it. Get a set of three servers going on the same ports like we did above. If the ones you ran earlier are still going, you can just use them again. Now we can run the asynchronous client, located in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/async-client/get-poetry.py"><TT>async-client/get-poetry.py</TT></A>, like this:
    python async-client/get-poetry.py 10000 10001 10002
    And you should get some output like this:
    Task 1: got 30 bytes of poetry from 127.0.0.1:10000
    Task 2: got 10 bytes of poetry from 127.0.0.1:10001
    Task 3: got 10 bytes of poetry from 127.0.0.1:10002
    Task 1: got 30 bytes of poetry from 127.0.0.1:10000
    Task 2: got 10 bytes of poetry from 127.0.0.1:10001
    ...
    Task 1: 3003 bytes of poetry
    Task 2: 623 bytes of poetry
    Task 3: 653 bytes of poetry
    Got 3 poems in 0:00:10.133169
    This time the output is much longer because the asynchronous client prints a line each time it downloads some bytes from any server, and these slow poetry servers just dribble out the bytes little by little. Notice that the individual tasks are mixed together just like in <A href="http://dpeticol.webfactional.com/blog/?p=1209#figure3">Figure 3</A> from Part 1.
    Try varying the delay settings for the servers (e.g., by making one server slower than the others) to see how the asynchronous client automatically "adjusts" to the speed of the slower servers while still keeping up with the faster ones. That's asynchronicity in action.
    Also notice that, for the server settings we chose above, the asynchronous client finishes in about 10 seconds while the synchronous client needs around 23 seconds to get all the poems. Now recall the differences between <A href="http://krondo.com/blog/?p=1209#figure3">Figure 3</A> and <A href="http://krondo.com/blog/?p=1209#figure4">Figure 4</A> in Part 1. By spending less time blocking, our asynchronous client can download all the poems in a shorter overall time. Now, our asynchronous client does block some of the time. Our slow server is <EM>slow</EM>.&nbsp; It's just that the asynchronous client spends a lot less time blocking than the "blocking" client does, because it can switch back and forth between all the servers.
    <P style="padding-left: 30px;">Technically, our asynchronous client <EM>is</EM> performing a blocking operation: it's writing to the standard output file descriptor with those <CODE>print</CODE> statements! This isn't a problem for our examples. On a local machine with a terminal shell that's always willing to accept more output the <CODE>print</CODE> statements won't really block, and execute quickly relative to our slow servers. But if we wanted our program to be part of a process pipeline and still execute asynchronously, we would need to use asynchronous I/O for standard input and output, too. Twisted includes support for doing just that, but to keep things simple we're just going to use <CODE>print</CODE> statements, even in our Twisted programs.
    <H3>A Closer Look
    Now take a look at the source code for the asynchronous client. Notice the main differences between it and the synchronous client:
    <OL>
    * Instead of connecting to one server at a time, the asynchronous client connects to all the servers at once.
    * The socket objects used for communication are placed in non-blocking mode with the call to <CODE>setblocking(0)</CODE>.
    * The <CODE>select</CODE> method in the <A href="http://docs.python.org/library/select.html#module-select">select</A> module is used to wait (block) until any of the sockets are ready to give us some data.
    * When reading data from the servers, we read only as much as we can until the socket would block, and then move on to the next socket with data to read (if any). This means we have to keep track of the poetry we've received from each server so far.
    </OL>
    The core of the asynchronous client is the top-level loop in the <CODE>get_poetry</CODE> function. This loop can be broken down into steps:
    <OL>
    * Wait (block) on all open sockets using <CODE>select</CODE> until one (or more) sockets has data to be read.
    * For each socket with data to be read, read it, but only as much as is available now. <A href="http://en.wikipedia.org/wiki/Asynchronous_I/O">Don't block</A>.
    * Repeat, until all sockets have been closed.
    </OL>
    The synchronous client had a loop as well (in the <CODE>main</CODE> function), but each iteration of the synchronous loop downloaded one complete poem. In one iteration of the asynchronous client we might download pieces of all the poems we are working on, or just some of them. And we don't know which ones we will work on in a given iteration, or how much data we will get from each one. That all depends on the relative speeds of the servers and the state of the network. We just let <CODE>select</CODE> tell us which ones are ready to go, and then read as much data as we can from each socket without blocking.
    If the synchronous client always contacted a fixed number of servers (say 3), it wouldn't need an outer loop at all, it could just call its blocking <CODE>get_poetry</CODE> function three times in succession. But the asynchronous client can't do without an outer loop — to gain the benefits of asynchronicity, we need to wait on <EM>all</EM> of our sockets at once, and only process as much data as each is capable of delivering in any given iteration.
    <P style="text-align: left;">This use of a loop which waits for events to happen, and then handles them, is so common that it has achieved the status of a design pattern: the <A href="http://en.wikipedia.org/wiki/Reactor_pattern">reactor pattern</A>. It is visualized in Figure 5 below:
    <A name="figure5"></A>
    <DIV id="attachment_1301" class="wp-caption aligncenter" style="width: 310px"><A href="./part2_files/reactor-1.png"><IMG class="size-full wp-image-1301" title="Figure 5: the reactor loop" src="./part2_files/reactor-1.png" alt="Figure 5: the reactor loop" width="300" height="366"></A><P class="wp-caption-text">Figure 5: the reactor loop</DIV>
    <P style="text-align: center;">
    <P style="text-align: left;">The loop is a "reactor" because it waits for and then reacts to events. For that reason it is also known as an <EM>event loop</EM>. And since reactive systems are often waiting on I/O, these loops are also sometimes called <A href="http://en.wikipedia.org/wiki/Asynchronous_I/O#Select.28.2Fpoll.29_loops"><EM>select loops</EM></A>, since the select call is used to wait for I/O. So in a <CODE>select</CODE> loop, an "event" is when a socket becomes available for reading or writing. Note that <CODE>select</CODE> is not the only way to wait for I/O, it is just one of the oldest methods (and thus widely available). There are several newer APIs, available on different operating systems, that do the same thing as <CODE>select</CODE> but offer (hopefully) better performance. But leaving aside performance, they all do the same thing: take a set of sockets (really file descriptors) and block until one or more of them is ready to do I/O.
    <P style="text-align: left; padding-left: 30px;">Note that it's possible to use <CODE>select</CODE> and its brethren to simply check whether a set of file descriptors is ready for I/O without blocking. This feature permits a reactive system to perform non-I/O work inside the loop. But in reactive systems it is often the case that all work is I/O-bound, and thus blocking on all file descriptors conserves CPU resources.
    <P style="text-align: left;">Strictly speaking, the loop in our asynchronous client is not the reactor pattern because the loop logic is not implemented separately from the "business logic" that is specific to the poetry servers. They are all just mixed together. A real implementation of the reactor pattern would implement the loop as a separate abstraction with the ability to:
    <OL>
    * Accept a set of file descriptors you are interested in performing I/O with.
    * Tell you, repeatedly, when any file descriptors are ready for I/O.
    </OL>
    And a really good implementation of the reactor pattern would also:
    <OL>
    * Handle all the weird corner cases that crop up on different systems.
    * Provide lots of nice abstractions to help you use the reactor with the least amount of effort.
    * Provide implementations of public protocols that you can use out of the box.
    </OL>
    Well that's just what Twisted is — a robust, cross-platform implementation of the Reactor Pattern with lots of extras. And in <A href="http://krondo.com/blog/?p=1333">Part 3</A> we will start writing some simple Twisted programs as we move towards a Twisted version of Get Poetry Now!.
    <H3>Suggested Exercises
    <OL>
    * Do some timing experiments with the blocking and asynchronous clients by varying the number and settings of the poetry servers.
    * Could the asynchronous client provide a <CODE>get_poetry</CODE> function that returned the text of the poem? Why not?
    * If you wanted a <CODE>get_poetry</CODE> function in the asynchronous client that worked in an analogous way, but asynchronously, what arguments and return values might it have?
    </OL>
