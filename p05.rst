============================== 
파트 5 : 더 Twisted시를 
============================== 

추상적 인 표현 기법 
---------------- 
": doc :`p04`"는 Twisted를 사용한 최초의시 클라이언트를 만들었습니다. 제대로 동작하지만, 개선의 여지가 매우 있습니다. 

먼저, 클라이언트 코드는 네트워크 소켓을 생성하고 그 소켓으로부터 데이터를 수신하는 같은 흔한 것이 섞여 있습니다. Twisted은 우리가 새로운 프로그램을 작성할 때마다 자력으로 구현할 필요가 없도록 이러한 종류의 것을 도와주는 기능을 제공 해줍니다. 비동기 입출력은`클라이언트 코드 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py>`_에서보고 온 것 같은 조금 까다로운 예외 처리를 취급하기 때문에,이 지원은 특히 고마운 것입니다. 또한 여러 플랫폼에서 동작하도록 싶은 경우 더 까다로운 것이 요구됩니다. 여가 시간이 있으면, "win32"용 Twisted 코드를 바라보고,인가 플랫폼에 독특한 주의점이 얼마나 있는지 확인하십시오. 

현재 클라이언트가 가진 또 하나의 문제점은 오류 처리입니다. Twisted 클라이언트 버전 1.0을 움직여 봐 서버가 기다리고 있지 않은 포트에서 다운로드 해보십시오. 아무 말없이 충돌하게됩니다. 클라이언트를 고치고도 좋지만 오류 처리는 Twisted의 API를 사용하는 것이 간단합니다. 

마지막 문제는 클라이언트의 재사용 성이 없다는 것입니다. 다른 모듈이시를 취득하는 경우에는 어떻게할까요? "호출"모듈이시의 다운로드가 완료되었음을 알려면 어떻게할까요? 시의 모두 가져 오기까지 차단할 같은 단순히시의 문자열을 반환하는 함수를 작성할 수는 없습니다. 실제적인 문제가 있지만, 오늘은 수정 할 생각은 없습니다. 후 파트까지 아껴 둡시다. 

높은 수준의 API와 인터페이스를 사용하여 첫 번째와 두 번째 문제점을 수정하기로합시다. Twisted 프레임 워크는 느슨하게 추상화 계층으로 이루어져 있으며, Twisted을 학습 이러한 계층을 제공하는 것을 배울 것입니다. 즉, API 인터페이스, 구현의 각각에서 유효하다는 것을 배우고 있다는 것입니다. 여기서 소개하는 것은 입문용 것이므로 각각의 추상화에 대해 철저하게 세부까지 학습 할 생각은 없으며, 샅샅이 조사 할 생각도 없습니다. Twisted을 함께 사용하면 편 하니까라고 생각해 줄 수 있도록 가장 중요한 부분을 읽어 갈뿐입니다. Twisted 아키텍처를 둘러싼 형식에 일단 익숙해지면 새로운 부분을 자습하는 것은 매우 쉽게 될 것입니다. 

일반적으로 각 Twisted 추상화있는 개념과 함께 생각됩니다. 예를 들어``IReadDescriptor``을 사용하여 파트 4에서 기술 한 1.0 클라이언트는 "읽을 수있는 파일 디스크립터"라는 추상화를 볼 수 있습니다. Twisted 추상화는 대부분 어떻게 행동을 내포 한 객체를 규정하는 인터페이스로 정의됩니다. Twisted 추상화를 배울 때 기억했으면 좋겠다 가장 중요한 것은 다음과 같습니다. 

     "Twisted에서 가장 높은 수준의 추상화는 낮은 수준의 물건을 **로 ** 조립되어 있습니다. 대체는 ** 아닙니다 **." 

따라서 Twisted 새로운 추상화를 배워 갈 때 그것이 무엇을하는지와 무엇을하지 않는지 모두를 걱정하십시오. 특히 초기에 설명 된 추상화 A가 F라는 기능을 구현하고 있다면, 아마 F는 다른 추상화가 구현되지 않은 것입니다. 오히려 다른 B라는 추상화가 F를 필요로하고 있다면, F 자신을 구현하는 것이 아니라 A를 사용하게 될 것입니다. (일반적으로는 B의 구현은 A의 구현을 서브 클래스 화 한 것 또는 A를 구현하는 다른 개체에 대한 참조가 될 것입니다.) 

네트워킹는 복잡한 과제이며, 따라서 Twisted 많은 추상화가 있습니다. 우선 낮은 수준에서 시작하여 작동 Twisted 프로그램에 그들 모두를 정리하는 방법을보다 명확하게 그릴 수있게되어 가면 좋다고 생각합니다. 

반복 사고 
---------------- 
여기까지 배운 가장 중요한 추상화는 실제로는 Twisted있어서 가장 중요한 추상화입니다 만, reactor입니다. Twisted를 사용하여 구축 된 모든 프로그램의 중심에는 프로그램이 얼마나 많은 레이어를 가지고있다 할지라도 계속 돌고 모든 것을 진행 해주는 reactor 루프가 있습니다. Twisted은 reactor가 제공하는 기능 이외의 것을 가지고 있지 않습니다. 실제로 Twisted의 다른 부분의 대부분은 "reactor를 사용하여 X라는 뭔가를 쉽게하기위한 도구"라고 생각합니다. X는 "Web 페이지를 제공하는 것"이거나 "데이터베이스에 쿼리를 실행하는 것"이거나, 기타 특정 기능의 것일지도 모릅니다. 클라이언트 1.0이 이렇게대로 낮은 수준의 API에 충실 할 수는 있지만, 스스로 더 많은 것을 구현하지 않으면 안됩니다. 높은 수준의 추상화로 전환하면 일반적으로 적은 코드를 작성합니다. (Twisted 플랫폼 의존의 까다로운 것을시켜 하구요.) 

그러나 Twisted 층 외부에서 작업하고있는 경우 reactor가 존재하고 있음을 쉽게 잊을 수 있습니다. 그만한 크기의 Twisted 프로그램은 reactor API를 직접 사용하는 부분은 무시할 것입니다. 다른 낮은 수준의 추상화도 마찬가지입니다. 클라이언트 1.0에서 사용한 파일 디스크립터의 추상화는 더 높은 수준의 개념에 의해 완전하게 은폐됩니다. (내부적으로 사용되고 있지만, 우리가 볼 수있는 것은 거의 없습니다.) 

파일 디스크립터의 추상화를 사용한다면 실제로는 문제가되지 않습니다. Twisted 비동기 입출력 메커니즘을 제어시켜두면 우리가 해결해야 할 문제에 집중할 수 있도록합니다. 그러나 reactor는 다릅니다. 결코 보이지 않게되는 것은 아닙니다. Twisted를 사용하려고 결정은 Reactor 패턴을 사용하고자 결정하는 것입니다 그리고 콜백과 협력 멀티 태스킹을 사용하는 'reactive 스타일 "프로그래밍을 의도합니다. Twisted를 정확하게 사용하고 싶다면, reactor의 존재 (그리고 어떻게 작동하고 있는지)를 신경 쓰고 두지 않으면 안됩니다. 파트 6에서 더 자세한 일을하고 있지만 지금은 다음 메시지를 줍시다. 

     이 입문서에서는 ": ref :`figure5`"와 ": ref :`figure6`"가장 중요한 다이어그램입니다. 

새로운 개념을 설명하기 위해 다이어그램을 계속 하겠지만,이 두 그림은 머리에 두드려 넣어 두지 않으면 안됩니다. 내가 Twisted를 사용하여 프로그램을 작성할 때 항상 염두에두고있는 그림입니다. 

코드를 살펴 전에 세 가지 새로운 추상화를 소개합니다. Transports과 Protocols과 Protocol Factories입니다. 

Transports 
^^^^^^^^^^ 
전송 계층의 추상화는 Twisted의 핵심 interface_ 모듈 ITransport_에 정의되어 있습니다. Twisted 전송 계층은 바이트를 송수신 할 수있는 단일 연결을 표현합니다. 우리시의 클라이언트에게 전송 계층은 TCP_ 연결을 추상화하여줍니다. 이전에 스스로 구현하고 루이 것입니다. 그러나 Twisted는`Unix 파이프`_ 나 UDP_ 소켓 등을 통한 입출력도 제공합니다. 전송 계층의 추상화는 이러한 연결을 나타내며 그것이 어떤 연결이든 비동기식 입출력의 상세한 것을 처리합니다. 

.. _interface : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py 
.. _ITransport : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1289 
.. _TCP : http://en.wikipedia.org/wiki/Transmission_Control_Protocol 
.. _UDP : http://en.wikipedia.org/wiki/Udp 
.. _Unix 파이프 : http://en.wikipedia.org/wiki/Unix_pipe#Network_pipes 

``ITransport``에 정의 된 메소드를 읽어 봐도 데이터를 수신하는 코드를 찾을 수 없을지도 모릅니다. 이것은 전송 계층은 항상 낮은 수준 부분 (연결 개체에서 데이터를 비동기 적으로로드 같은 부분)을 처리하고 콜백을 통해 우리에게 데이터를 전달하는 것입니다. 비슷한 것이지만, 전송 개체 레코딩에 관한 방법은 블로킹을 피하기 위해 즉시 데이터를 기록하지 않도록 할지도 모릅니다. 전송 계층에 데이터를 써 내도록 알리는 것은 "가능한 한 빨리 데이터를 보내주고, 그러나 블로킹을 피하기 위해 '라는 것을 의미합니다. 물론 데이터는 우리가 전달 잘못된 순서로 쓴 것입니다. 

기본적으로, 우리의 코드에 직접 전송 개체를 구현하는 것은 아닙니다. 오히려 Twisted가 이미 제공 해주고 있고, reactor에 연결을 연결해달라고하게 할 때 생성되는 구현을 사용하게됩니다. 

Protocols 
^^^^^^^^^ 
Twisted의 프로토콜은 또한 interface_ 모듈 IProtocol_에서 정의됩니다. 예상대로, 프로토콜 개체 프로토콜 _를 구현합니다. 즉, Twisted의 프로토콜의 특정 구현은 네트워크 프로토콜 FTP_과 IMAP_과 자신들의 목적을 위해 만든 이름도없는 프로토콜과 같은 것,을 구현해야한다는 것입니다. 우리시의 프로토콜은 그런 것들 중 하나입니다 만, 이것은 연결이 설정되면 즉시시의 모든 바이트를 단순히 보냅니다. 한편, 연결이 닫힐 것은시의 끝입니다. 

.. _IProtocol : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1111 
.. _ 프로토콜 : http://en.wikipedia.org/wiki/Protocol_(computing) 
.. _FTP : http://en.wikipedia.org/wiki/File_Transfer_Protocol 
.. _IMAP : http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol 

엄밀히 말하면 각 Twisted 프로토콜의 객체는 특정 연결을위한 프로토콜을 구현합니다. 따라서 프로그램에서 사용하는 연결 (또는 서버의 경우에는 대기받는 연결됩니다)에는 프로토콜의 인스턴스가 하나 필요합니다. 이렇게하면 프로토콜의 인스턴스는 "상태"프로토콜 상태를 유지하고 부분적으로받은 메시지의 데이터를 축적하는데 적합한 것입니다. (비동기 입출력에서 데이터 크기의 바이트 열을 받았을 때문입니다.) 

는 프로토콜의 인스턴스는 무엇 연결을 맡고 있는지 어떻게 알수 있을까요? ``IProtocol``의 정의를 보면``makeConnection``라는 방법을 찾을 것입니다. 이 메소드는 콜백이며, 전송 인스턴스를 유일한 인수로서 Twisted 코드를 호출합니다. 전송 프로토콜이 사용하고자하는 연결입니다. 

Twisted에는 일반적인 프로토콜에 대한 많은 프로토콜 구현이 포함되어 있습니다. twisted.protocol.basic_ 몇 가지 간단한 구현합니다. 새로운 프로토콜을 작성하기 전에 Twisted 소스를 확인해 보는 것은 좋은 생각입니다. 사용 가능한 구현이 이미 있을지도 모릅니다. 그러나 없었다고해도 스스로 구현하면 아무 문제 없습니다. 시 클라이언트에서 지내기로합시다. 

.. _twisted.protocol.basic : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/protocols/basic.py 

Protocol Factories 
^^^^^^^^^^^^^^^^^^ 
각 연결에는 프로토콜이 필요하며, 프로토콜은 우리가 구현하는 클래스의 인스턴스지도 모릅니다. Twisted 연결을 관리 할 수 있기 때문에 새 연결이 만들어진 때마다 그 자리에서 적절한 프로토콜을 생성하는 방법이 필요합니다. 프로토콜의 인스턴스를 만드는 것은 프로토콜 팩토리의 일입니다. 

아마 짐작대로 프로토콜 팩토리 API는 interface_ 모듈 IProtocolFactory_에서 정의됩니다. 프로토콜 팩토리 디자인 패턴의 Factory_의 일례이며, 그대로 작동합니다. ``buildProtocol`` 메소드는 호출 될 때마다 새로운 프로토콜 인스턴스를 반환하게되어 있습니다. 이것은 새로운 연결마다 새로운 프로토콜 인스턴스를 생성하기 위해 Twisted가 사용하는 메소드입니다. 

.. _IProtocolFactory : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1259 
.. _Factory : http://en.wikipedia.org/wiki/Factory_pattern 

시를 얻는 클라이언트 2.0 : 우선 Blood.0 
-------------------------------------------- 
좋아, 그럼 Twisted시 클라이언트 버전 2.0를 살펴 봅시다. 코드는`twisted-client-2 / get-poetry.py`_에 있습니다. 다른 것들과 마찬가지로 움직일 수 번잡 한 때문에 올려 없지만 비슷한 출력이 될 것입니다. 이것은 바이트를 수신하면 작업 번호를 출력하는 마지막 버전입니다. 여기까지는 모든 Twisted 프로그램은 교대로 작업을 수행하고 한 번에 비교적 작은 데이터 덩어리 밖에 처리하지 못했습니다. 앞으로도 중요한 국면에서는 무슨 일이 일어나고 있는지를 표시하기 위해``print`` 문장을 사용하고 있습니다 만, 중복 출력은 중지합니다. 

.. _twisted-client-2 / get-poetry.py : http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py 

버전 2.0 클라이언트는 소켓이 보이지 않습니다. ``socket`` 모듈을 가져올조차하지 않고, 소켓 객체 나 파일 디스크립터 등을 참조하지 않습니다. 대신,`이렇게하여 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L110>`_ reactor에시 서버에 연결하도록 전하고 있습니다. 
: 

     factory = PoetryClientFactory (len (addresses)) 

     from twisted.internet import reactor 

     for address in addresses : 
         host, port = address 
         reactor.connectTCP (host, port, factory) 


``connectTCP`` 방법에 주목하십시오. 처음 두 인수는 본 그대로입니다. 세 번째 인수는 우리의 PoetryClientFactory_의 인스턴스입니다. 이것은시 클라이언트의 프로토콜 팩토리이며 Twisted이 필요한 우리의 PoetryProtocol_ 인스턴스를 생성 할 수 있도록 reactor에 전달합니다. 

.. _PoetryClientFactory : http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L69 
.. _PoetryProtocol : http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L52 

이전 클라이언트에서``PoetrySocket`` 개체와 달리 팩토리도 프로토콜도 처음부터 구현하는 것은 아니라는 점에주의하십시오. 대신 Twisted가 twisted.internet.protocol_에서 제공하는 기반 구현을 상속합니다. 기본이되는 팩토리의 기본 클래스는 twisted.internet.protocol.Factory_이지만, 우리는 고객에 특화된 서브 클래스 인 ClientFactory_을 사용하고 있습니다. (서버처럼 접속을 기다리는 것이 아니라 연결을 생성합니다.) 

.. _twisted.internet.protocol : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py 
.. _twisted.internet.protocol.Factory : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L24 
.. _ClientFactory : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103 

Twisted의`Factory`` 클래스는`buildProtocol``을 구현하고 있다는 이점도 누릴 수 있습니다. 우리의`서브 클래스 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L79>`_에서 기본 클래스 구현을 호출합니다 . 
: 

     def buildProtocol (self, address) : 
         proto = ClientFactory.buildProtocol (self, address) 
         proto.task_num = self.task_num 
         self.task_num + = 1 
         return proto 

기본 클래스는 어떤 프로토콜을 구축하는 방법을 어떻게 알수 있을까요? ``PoetryClientFactory``의`protocol`` 속성을 설정하는 것입니다. 
: 

     class PoetryClientFactory (ClientFactory) : 

         task_num = 1 

         protocol = PoetryProtocol # tell base class what proto to build 

기저``Factory`` 클래스는`protocol`` 속성에 설정 한 클래스 (즉``PoetryProtocol``입니다)를 인스턴스화 해, 새로운 인스턴스에서``factory`` 속성을 그 "부모"의 팩토리 에 대한 참조가되도록 설정하여``buildProtocol``를 구현합니다. 이 모습을 그림 8에 나타냅니다. 

.. _figure8 : 

.. figure :: images / p05_protocols-1.png 

     그림 8 : 프로토콜이 생성 될 때 

위에서 언급 한 바와 같이, 프로토콜 개체의`factory`` 속성은 동일한 공장에서 만들어진 프로토콜 상태를 공유 ​​할 수 있습니다. 팩토리는 "사용자 코드"에서 생성되기 때문에 동일한 속성이 프로토콜 개체에 통신을 허용함으로써 요청의 초기화가 최초로 발생한 시점에서 코드에 결과를 반환합니다. 이것은 6 부에서 살펴 보겠습니다. 

프로토콜``factory`` 속성은 프로토콜 팩토리의 인스턴스를 참조 합니다만, 팩토리``protocol`` 속성은 프로토콜의 클래스를 참조합니다. 일반적으로 단일 팩토리는 여러 프로토콜 인스턴스를 생성하는 것입니다. 

프로토콜 생성의 두 번째 단계에서는``makeConnection`` 메소드를 사용하여 Transport를 가진 프로토콜에 연결합니다. 이 메소드를 직접 구현할 필요는 없습니다. Twisted의 기본 클래스가 표준 구현을 제공하여주기 때문입니다. 기본적으로``makeConnection``는`transport`` 속성 Transport에 대한 참조를 저장하고``connected`` 속성을 참 (True)로 설정합니다. 그림 9에 그 모습을 그렸습니다. 

.. _figure9 : 

.. figure :: images / p05_protocols-2.png 

     그림 9 : 프로토콜과 Transport의 만남 

이 방법으로 일단 초기화되면 프로토콜은 실제 작업을 시작할 수 있습니다. 낮은 수준의 데이터 흐름을 높은 수준의 프로토콜 메시지 흐름 변환 (반대도 마찬가지입니다)입니다. 입력 데이터를 처리하는 핵심 메서드는`dataReceived``입니다. 이것은 우리의 클라이언트는`이렇게 <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L57>`_ 구현하고 있습니다 . 
: 

     def dataReceived (self, data) : 
         self.poem + = data 
         msg = 'Task % d : got % d bytes of poetry from % s' 
         print msg % (self.task_num, len (data) self.transport.getHost ()) 

``dataReceived``이 불릴 때마다 문자열 형식으로 새로운 바이트 (``data``)를 얻습니다. 비동기 입출력은 본래이지만, 어느 정도의 데이터를 받는지를 알 방법이 없기 때문에, 완전한 프로토콜 메세지를받을 때까지 버퍼에 모아 않아 안됩니다. 우리의 경우라면,시는 연결이 닫힐 때까지 끝나지 않으므로``.poem`` 특성에 바이트를 추가하고 있습니다. 

어떤 서버에서받은 데이터를 구별하기 위해 Transport의`getHost <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1341>` _ 메소드를 사용하고 있습니다. 이것은 이전 클라이언트와의 일관성을 위해하고있을뿐입니다. 그렇지 않으면 Transport를 명시 적으로 사용할 필요는 전혀 없습니다. 서버에 아무것도 데이터를 전송하기 때문입니다. 

``dataReceived`` 메소드를 호출 할 때 무슨 일이 일어나고 있는지 좀 살펴 보자. 버전 2.0 클라이언트와 같은 디렉토리에``twisted-client-2 / get-poetry-stack.py``라는 또 다른 클라이언트가 있습니다. ``dataReceived`` 메소드가 다음과 같이 변경된 이외는 2.0 클라이언트 수 있습니다. 
: 

     def dataReceived (self, data) : 
         traceback.print_stack () 
         os._exit (0) 

이 변경에 의해 프로그램은 스택 트레이스를 출력합니다. 그리고 데이터를받은 첫 번째 시간에 종료됩니다. 이 버전을 움직여 보면 이런 느낌입니다. 
: 

     python twisted-client-2 / get-poetry-stack.py 10000 

다음과 같은 스택 추적을 얻을 수있을 것이다. 
: 

     File "twisted-client-2 / get-poetry-stack.py", line 125, in 
         poetry_main () 

     ... # I removed a bunch of lines here 

     File "... / twisted / internet / tcp.py", line 463, in doRead # Note the doRead callback 
         return self.protocol.dataReceived (data) 
     File "twisted-client-2 / get-poetry-stack.py", line 58, in dataReceived 
         traceback.print_stack () 

1.0 클라이언트에서 사용한``doRead`` 콜백이 있군요! 앞서 언급 한 바와 같이, Twisted는 기존의 기능을 대체하는 것이 아니라 그들을 통해 새로운 추상화 계층을 조립합니다. 그래서 지금도``IReadDescriptor``의 구현은 제대로 작동하고 있으며, 우리의 코드가 아니라 Twisted에 의해 구현되는 것입니다. 만약 관심을 가진다면 Twisted 구현``twisted.internet.tcp``에 있습니다. 코드를 쫓아 보면``IWriteDescriptor``와``ITransport``을 구현하는 동일한 개체를 볼 수있을 것이다. 따라서``IReadDescriptor`` 실제로 보이는 Transport 객체입니다. ``dataReceived`` 콜백은 그림 10과 같이 나타낼 수 있습니다. 

.. _figure10 : 

.. figure :: images / p05_reactor-data-received.png 

     그림 10 :``dataReceived`` 콜백 


시를 다운로드하고 나면``PoetryProtocol`` 객체는`PoetryClientFactory``에 알립니다. 
: 

     def connectionLost (self, reason) : 
         self.poemReceived (self.poem) 

     def poemReceived (self, poem) : 
         self.factory.poem_finished (self.task_num, poem) 

전송 연결이 닫힐 때``connectionLost`` 콜백이 관계하고 있습니다. ``reason`` 인수는 연결이 예쁘게 닫힌인지 오류의 탓인지는 추가 정보가있는 twisted.python.failure.Failure_ 개체입니다. 우리의 클라이언트는 단순히이 값을 무시하는 것만으로,시를 수신 해 버린 가정합니다. 

.. _twisted.python.failure.Failure : http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py 

모든시를 다운로드하고 나면 팩토리는 reactor를 종료합니다. 우리의 프로그램이하고있는 일이라고시를 다운로드하는 것 뿐이라는 것을 다시 확인하십시오. 이것은에는 'PoetryClientFactory`` 객체 재사용 성이 낮아지고 버립니다. 다음 파트에서 수정으로 여기에는 'poem_finished`` 콜백시 수를 쫓는 방법에 주목하십시오. 
: 

     ... 
         self.poetry_count - = 1 

         if self.poetry_count == 0 : 
             ... 

각 구절이 별도의 스레드에서 다운로드되는 같은 멀티 스레드 프로그램을 썼다면, 두 개 이상의 스레드가``poem_finished``를 동시에 호출하지 않도록이 부분의 코드를 잠금으로 보호해야 수 있습니다. 그렇지 않으면, reactor를 두 번 종료 시키게 될지도 모릅니다 (그런 문제 때문에 추적을 얻을 수있는 것입니다 만). 그러나 reactive 시스템에서는 그런 귀찮은 것은 필요 없습니다. reactor 한번에 하나의 콜백 만 조작하지 않으므로 이러한 문제가 발생 것과도 없습니다. 

새로운 클라이언트 1.0 클라이언트보다 너그 럽게 연결 실패도 취급합니다. 그 부분을 실행하는``PoetryClientFactory`` 클래스의 콜백은 다음과 같습니다. 
: 

     def clientConnectionFailed (self, connector, reason) : 
         print 'Failed to connect to :'connector.getDestination () 
         self.poem_finished () 

콜백은 팩토리 있고 프로토콜이 아님에 주목하십시오. 프로토콜은 연결이 된 후에 만 생성되지 않으므로 연결을 설정할 수 없음을 알고는 팩토리라는 것입니다. 

더 간단한 클라이언트 
^^^^^^^^^^^^^^^^^^^^^^^^ 
새로운 클라이언트는 이미 매우 간단하지만 작업 번호를 의식하지 않아도 좋으면 더 쉽게 할 수 있습니다. 결국, 클라이언트는 바로시 자체가 될 것입니다. 단순화 된 버전 2.1의 구현은`twisted-client-2 / get-poetry-simple.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get- poetry-simple.py>`_이 있습니다. 

정리 
------ 
클라이언트 2.0은 모든 Twisted 해커가 익숙해 져 있어야 Twisted 추상화를 사용합니다. 만약 어떤시를 출력 해 종료하도록 명령 줄 클라이언트에서 충분하면 여기서 멈춰 버린 프로그램은 완성 된로 버리면됩니다. 그러나 재사용 코드, 즉 일부 구절을 다운로드하여 다른 무언가도 실행할 같은 큰 프로그램에 임베드 코드를 갖고 싶다고되면해야 할 일이 아직 있습니다. ": doc :`p06`"는 거기에 초점을두기로합시다. 

추천 연습 문제 
------------------ 
#. 지정된 시간이 경과하여도 다운로드 되었으면 않을 때는 클라이언트 시간 초과시키기 위해``callLater``을 사용하십시오. 시간에 연결을 닫기 위해서는 전송`loseConnection <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1321>`_ 메소드를 사용하십시오. 또한 시간에시를 다운로드 한 후에 시간을 취소하는 것을 잊지 말아주세요. 
#``connectionLost``가 불려 갔을 때 발생하는 콜백의 호출 순서를 분석하기 위해 스택 추적 방법을 사용하십시오.

..
    <H2>Part 5: Twistier Poetry
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Abstract Expressionism
    In <A href="http://krondo.com/blog/?p=1445">Part 4</A> we made our first poetry client that uses Twisted. It works pretty well, but there is definitely room for improvement.
    First of all, the client includes code for mundane details like creating network sockets and receiving data from those sockets. Twisted provides support for these sorts of things so we don't have to implement them ourselves every time we write a new program. This is especially helpful because asynchronous I/O requires a few tricky bits involving exception handling as you can see in the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py">client code</A>. And there are even more tricky bits if you want your code to work on multiple platforms. If you have a free afternoon, search the Twisted sources for "win32″ to see how many corner cases that platform introduces.
    Another problem with the current client is error handling. Try running version 1.0 of the Twisted client and tell it to download from a port with no server. It just crashes. We could fix the current client, but error handling is easier with the Twisted APIs we'll be using today.
    Finally, the client isn't particularly re-usable. How would another module get a poem with our client? How would the "calling" module know when the poem had finished downloading? We can't write a function that simply returns the text of the poem as that would require blocking until the entire poem is read. This is a real problem but we're not going to fix it today — we'll save that for future Parts.
    We're going to fix the first and second problems using a higher-level set of APIs and Interfaces. The Twisted framework is loosely composed of layers of abstractions and learning Twisted means learning what those layers provide, i.e, what APIs, Interfaces, and implementations are available for use in each one. Since this is an introduction we're not going to study each abstraction in complete detail or do an exhaustive survey of every abstraction that Twisted offers. We're just going to look at the most important pieces to get a better feel for how Twisted is put together. Once you become familiar with the overall style of Twisted's architecture, learning new parts on your own will be much easier.
    In general, each Twisted abstraction is concerned with one particular concept. For example, the 1.0 client from Part 4 uses <CODE>IReadDescriptor</CODE>, the abstraction of a "file descriptor you can read bytes from". A Twisted abstraction is usually defined by an Interface specifying how an object embodying that abstraction should behave. The most important thing to keep in mind when learning a new Twisted abstraction is this:
    <P style="padding-left: 30px;">Most higher-level abstractions in Twisted are built by <EM>using</EM> lower-level ones, <EM>not</EM> by replacing them.
    So when you are learning a new Twisted abstraction, keep in mind both what it does and what it does not do. In particular, if some earlier abstraction <EM>A</EM> implements feature <EM>F</EM>, then <EM>F</EM> is probably not implemented by any other abstraction. Rather, if another abstraction <EM>B</EM> needs feature <EM>F</EM>, it will use <EM>A</EM> rather than implement <EM>F</EM> itself.&nbsp; (In general, an implementation of <EM>B</EM> will either sub-class an implementation of <EM>A</EM> or refer to another object that implements <EM>A</EM>).
    Networking is a complex subject, and thus Twisted contains lots of abstractions. By starting with lower levels first, we are hopefully getting a clearer picture of how they all get put together in a working Twisted program.
    <H3>Loopiness in the Brain
    The most important abstraction we have learned so far, indeed the most important abstraction in Twisted, is the reactor. At the center of every program built with Twisted, no matter how may layers that program might have, there is a reactor loop spinning around and making the whole thing go. Nothing else in Twisted provides the functionality the reactor offers. Much of the rest of Twisted, in fact, can be thought of as "stuff that makes it easier to do X using the reactor" where X might be "serve a web page" or "make a database query" or some other specific feature. Although it's possible to stick with the lower-level APIs, like the client 1.0 does, we have to implement more things ourselves if we do. Moving to higher-level abstractions generally means writing less code (and letting Twisted handle the platform-dependent corner cases).
    But when we're working at the outer layers of Twisted it can be easy to forget the reactor is there. In any Twisted program of reasonable size, relatively few parts of our code will actually use the reactor APIs directly. The same is true for some of the other low-level abstractions. The file descriptor abstractions we used in client 1.0 are so thoroughly subsumed by higher-level concepts that they basically disappear in real Twisted programs (they are still used on the inside, we just don't see them as such).
    As far as the file descriptor abstractions go, that's not really a problem. Letting Twisted handle the mechanics of asynchronous I/O frees us to concentrate on whatever problem we are trying to solve. But the reactor is different. It never really disappears. When you choose to use Twisted you are also choosing to use the Reactor Pattern, and that means programming in the "reactive style" using callbacks and cooperative multi-tasking. If you want to use Twisted correctly, you have to keep the reactor's existence (and the way it works) in mind. We'll have more to say about this in Part 6, but for now our message is this:
    <P style="padding-left: 30px;"><A href="http://krondo.com/blog/?p=1247#figure5">Figure 5</A> and <A href="http://krondo.com/blog/?p=1333#figure6">Figure 6</A> are the most important diagrams in this introduction.
    We'll keep using diagrams to illustrate new concepts, but those two Figures are the ones that you need to burn into your brain, so to speak. Those are the pictures I constantly have in mind while writing programs with Twisted.
    Before we dive into the code, there are three new abstractions to introduce: Transports, Protocols, and Protocol Factories.
    <H4>Transports
    The Transport abstraction is defined by <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1289"><CODE>ITransport</CODE></A> in the main Twisted <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py"><CODE>interfaces</CODE></A> module. A Twisted Transport represents a single connection that can send and/or receive bytes. For our poetry clients, the Transports are abstracting <A href="http://en.wikipedia.org/wiki/Transmission_Control_Protocol">TCP</A> connections like the ones we have been making ourselves in earlier versions. But Twisted also supports I/O over <A href="http://en.wikipedia.org/wiki/Unix_pipe#Network_pipes">UNIX Pipes</A> and <A href="http://en.wikipedia.org/wiki/Udp">UDP</A> sockets among other things. The Transport abstraction represents any such connection and handles the details of asynchronous I/O for whatever sort of connection it represents.
    If you scan the methods defined for <CODE>ITransport</CODE>, you won't find any for receiving data. That's because Transports always handle the low-level details of reading data asynchronously from their connections, and give the data to us via callbacks. Along similar lines, the write-related methods of Transport objects may choose not to write the data immediately to avoid blocking. Telling a Transport to write some data means "send this data as soon as you can do so,&nbsp; subject to the requirement to avoid blocking". The data will be written in the order we provide it, of course.
    We generally don't implement our own Transport objects or create them in our code. Rather, we use the implementations that Twisted already provides and which are created for us when we tell the reactor to make a connection.
    <H4>Protocols
    Twisted Protocols are defined by <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1111"><CODE>IProtocol</CODE></A> in the same <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py"><CODE>interfaces</CODE></A> module. As you might expect, Protocol objects implement <A href="http://en.wikipedia.org/wiki/Protocol_(computing)">protocols</A>. That is to say, a particular implementation of a Twisted Protocol should implement one specific networking protocol, like <A href="http://en.wikipedia.org/wiki/File_Transfer_Protocol">FTP</A> or <A href="http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol">IMAP</A> or some nameless protocol we invent for our own purposes. Our poetry protocol, such as it is, simply sends all the bytes of the poem as soon as a connection is established, while the close of the connection signifies the end of the poem.
    Strictly speaking, each instance of a Twisted Protocol object implements a protocol for one <EM>specific</EM> connection. So each connection our program makes (or, in the case of servers, accepts) will require one instance of a Protocol. This makes Protocol instances the natural place to store both the state of "stateful" protocols and the accumulated data of partially received messages (since we receive the bytes in arbitrary-sized chunks with asynchronous I/O).
    So how do Protocol instances know what connection they are responsible for? If you look at the <CODE>IProtocol</CODE> definition, you will find a method called <CODE>makeConnection</CODE>. This method is a callback and Twisted code calls it with a Transport instance as the only argument. The Transport is the connection the Protocol is going to use.
    Twisted includes a large number of ready-built Protocol implementations for various common protocols. You can find a few simpler ones in <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/protocols/basic.py"><CODE>twisted.protocols.basic</CODE></A>. It's a good idea to check the Twisted sources before you write a new Protocol to see if there's already an implementation you can use. But if there isn't, it's perfectly OK to implement your own, as we will do for our poetry clients.
    <H4>Protocol Factories
    So each connection needs its own Protocol and that Protocol might be an instance of a class we implement ourselves. Since we will let Twisted handle creating the connections, Twisted needs a way to make the appropriate Protocol "on demand" whenever a new connection is made. Making Protocol instances is the job of Protocol Factories.
    As you've probably guessed, the Protocol Factory API is defined by <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1259">IProtocolFactory</A>, also in the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py"><CODE>interfaces</CODE></A> module. Protocol Factories are an example of the <A href="http://en.wikipedia.org/wiki/Factory_pattern">Factory</A> design pattern and they work in a straightforward way. The <CODE>buildProtocol</CODE> method is supposed to return a new Protocol instance each time it is called. This is the method that Twisted uses to make a new Protocol for each new connection.
    <H3>Get Poetry 2.0: First Blood.0
    Alright, let's take a look at version 2.0 of the Twisted poetry client. The code is in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py"><CODE>twisted-client-2/get-poetry.py</CODE></A>. You can run it just like the others and get similar output so I won't bother posting output here. This is also the last version of the client that prints out task numbers as it receives bytes. By now it should be clear that all Twisted programs work by interleaving tasks and processing relatively small chunks of data at a time. We'll still use <CODE>print</CODE> statements to show what is going on at key moments, but the clients won't be quite as verbose in the future.
    In client 2.0, sockets have disappeared. We don't even import the <CODE>socket</CODE> module and we never refer to a socket object, or a file descriptor, in any way. Instead, we tell the reactor to make the connections to the poetry servers on our behalf like <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L110">this</A>:
    factory = PoetryClientFactory(len(addresses))

    from twisted.internet import reactor

    for address in addresses:
        host, port = address
        reactor.connectTCP(host, port, factory)
    The <CODE>connectTCP</CODE> method is the one to focus on. The first two arguments should be self-explanatory. The third is an instance of our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L69"><CODE>PoetryClientFactory</CODE></A> class. This is the Protocol Factory for poetry clients and passing it to the reactor allows Twisted to create instances of our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L52"><CODE>PoetryProtocol</CODE></A> on demand.
    Notice that we are not implementing either the Factory or the Protocol from scratch, unlike the <CODE>PoetrySocket</CODE> objects in our previous client. Instead, we are sub-classing the base implementations that Twisted provides in <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py"><CODE>twisted.internet.protocol</CODE></A>. The primary Factory base class is <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L24"><CODE>twisted.internet.protocol.Factory</CODE></A>, but we are using the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/protocol.py#L103"><CODE>ClientFactory</CODE></A> sub-class which is specialized for clients (processes that make connections instead of listening for connections like a server).
    We are also taking advantage of the fact that the Twisted <CODE>Factory</CODE> class implements <CODE>buildProtocol</CODE> for us. We call the base class implementation in our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L79">sub-class</A>:
    def buildProtocol(self, address):
        proto = ClientFactory.buildProtocol(self, address)
        proto.task_num = self.task_num
        self.task_num += 1
        return proto
    How does the base class know what Protocol to build? Notice we are also setting the class attribute <CODE>protocol</CODE> on <CODE>PoetryClientFactory</CODE>:
    class PoetryClientFactory(ClientFactory):

        task_num = 1

        protocol = PoetryProtocol # tell base class what proto to build
    The base <CODE>Factory</CODE> class implements <CODE>buildProtocol</CODE> by instantiating the class we set on <CODE>protocol</CODE> (<CODE>i.e., PoetryProtocol</CODE>) and setting the <CODE>factory</CODE> attribute on that new instance to be a reference to its "parent" Factory. This is illustrated in Figure 8:<A name="figure8"></A>
    <DIV id="attachment_1558" class="wp-caption aligncenter" style="width: 492px"><A href="./part5_files/protocols-1.png"><IMG class="size-full wp-image-1558" title="Figure 8: a Protocol is born" src="./part5_files/protocols-1.png" alt="Figure 8: a Protocol is born" width="482" height="358"></A><P class="wp-caption-text">Figure 8: a Protocol is born</DIV>
    As we mentioned above, the <CODE>factory</CODE> attribute on Protocol objects allows Protocols created with the same Factory to share state. And since Factories are created by "user code", that same attribute allows Protocol objects to communicate results back to the code that initiated the request in the first place, as we will see in Part 6.
    Note that while the <CODE>factory</CODE> attribute on Protocols refers to an instance of a Protocol Factory, the <CODE>protocol</CODE> attribute on the Factory refers to the <EM>class</EM> of the Protocol. In general, a single Factory might create many Protocol instances.
    The second stage of Protocol construction connects a Protocol with a Transport, using the <CODE>makeConnection</CODE> method. We don't have to implement this method ourselves since the Twisted base class provides a default implementation. By default, <CODE>makeConnection</CODE> stores a reference to the Transport on the <CODE>transport</CODE> attribute and sets the <CODE>connected</CODE> attribute to a True value, as depicted in Figure 9:<A name="figure9"></A>
    <DIV id="attachment_1564" class="wp-caption aligncenter" style="width: 501px"><A href="./part5_files/protocols-2.png"><IMG class="size-full wp-image-1564" title="Figure 9: a Protocol meets its Transport" src="./part5_files/protocols-2.png" alt="Figure 9: a Protocol meets its Transport" width="491" height="428"></A><P class="wp-caption-text">Figure 9: a Protocol meets its Transport</DIV>
    Once initialized in this way, the Protocol can start performing its real job — translating a lower-level stream of data into a higher-level stream of protocol messages (and vice-versa for 2-way connections). The key method for processing incoming data is <CODE>dataReceived</CODE>, which our client implements like <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry.py#L57">this</A>:
    def dataReceived(self, data):
        self.poem += data
        msg = 'Task %d: got %d bytes of poetry from %s'
        print  msg % (self.task_num, len(data), self.transport.getHost())
    Each time <CODE>dataReceived</CODE> is called we get a new sequence of bytes (<CODE>data</CODE>) in the form of a string. As always with asynchronous I/O, we don't know how much data we are going to get so we have to buffer it until we receive a complete protocol message. In our case, the poem isn't finished until the connection is closed, so we just keep adding the bytes to our <CODE>.poem</CODE> attribute.
    Note we are using the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1341"><CODE>getHost</CODE></A> method on our Transport to identify which server the data is coming from. We are only doing this to be consistent with earlier clients. Otherwise our code wouldn't need to use the Transport explicitly at all, since we never send any data to the servers.
    Let's take a quick look at what's going on when the <CODE>dataReceived</CODE> method is called. In the same directory as our 2.0 client, there is another client called <TT>twisted-client-2/get-poetry-stack.py</TT>. This is just like the 2.0 client except the <CODE>dataReceived</CODE> method has been changed like this:
    def dataReceived(self, data):
        traceback.print_stack()
        os._exit(0)
    With this change the program will print a stack trace and then quit the first time it receives some data. You could run this version like so:
    python twisted-client-2/get-poetry-stack.py 10000
    And you will get a stack trace like this:
    File "twisted-client-2/get-poetry-stack.py", line 125, in
        poetry_main()

    ... # I removed a bunch of lines here

    File ".../twisted/internet/tcp.py", line 463, in doRead  # Note the doRead callback
        return self.protocol.dataReceived(data)
    File "twisted-client-2/get-poetry-stack.py", line 58, in dataReceived
        traceback.print_stack()
    There's the <CODE>doRead</CODE> callback we used in client 1.0! As we noted before, Twisted builds new abstractions by using the old ones, not by replacing them. So there is still an <CODE>IReadDescriptor</CODE> implementation hard at work, it's just implemented by Twisted instead of our code. If you are curious, Twisted's implementation is in <TT>twisted.internet.tcp</TT>. If you follow the code, you'll find that the same object implements <CODE>IWriteDescriptor</CODE> and <CODE>ITransport</CODE> too. So the <CODE>IReadDescriptor</CODE> is actually the Transport object in disguise. We can visualize a <CODE>dataReceived</CODE> callback with Figure 10:
    <DIV id="attachment_1578" class="wp-caption aligncenter" style="width: 349px"><A href="./part5_files/reactor-data-received.png"><IMG class="size-full wp-image-1578" title="Figure 10: the dataReceived callback" src="./part5_files/reactor-data-received.png" alt="Figure 10: the dataReceived callback" width="339" height="335"></A><P class="wp-caption-text">Figure 10: the dataReceived callback</DIV>
    Once a poem has finished downloading, the <CODE>PoetryProtocol</CODE> object notifies its <CODE>PoetryClientFactory</CODE>:
    def connectionLost(self, reason):
        self.poemReceived(self.poem)

    def poemReceived(self, poem):
        self.factory.poem_finished(self.task_num, poem)
    The <CODE>connectionLost</CODE> callback is invoked when the transport's connection is closed. The <CODE>reason</CODE> argument is a <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/python/failure.py"><CODE>twisted.python.failure.Failure</CODE></A> object with additional information on whether the connection was closed cleanly or due to an error. Our client just ignores this value and assumes we received the entire poem.
    The factory shuts down the reactor after all the poems are done. Once again we assume the only thing our program is doing is downloading poems, which makes <CODE>PoetryClientFactory</CODE> objects less reusable. We'll fix that in the next Part, but notice how the <CODE>poem_finished</CODE> callback keeps track of the number of poems left to go:
    ...
        self.poetry_count -= 1

        if self.poetry_count == 0:
            ...
    If we were writing a multi-threaded program where each poem was downloaded in a separate thread we would need to protect this section of code with a lock in case two or more threads invoked <CODE>poem_finished</CODE> at the same time. Otherwise we might end up shutting down the reactor twice (and getting a traceback for our troubles). But with a reactive system we needn't bother. The reactor can only make one callback at a time, so this problem just can't happen.
    Our new client also handles a failure to connect with more grace than the 1.0 client. Here's the callback on the <CODE>PoetryClientFactory</CODE> class which does the job:
    def clientConnectionFailed(self, connector, reason):
        print 'Failed to connect to:', connector.getDestination()
        self.poem_finished()
    Note the callback is on the factory, not on the protocol. Since a protocol is only created after a connection is made, the factory gets the news when a connection cannot be established.
    <H4>A simpler client
    Although our new client is pretty simple already, we can make it simpler if we dispense with the task numbers. The client should really be about the poetry, after all. There is a simplified 2.1 version in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-2/get-poetry-simple.py"><TT>twisted-client-2/get-poetry-simple.py</TT></A>.
    <H3>Wrapping Up
    Client 2.0 uses Twisted abstractions that should be familiar to any Twisted hacker. And if all we wanted was a command-line client that printed out some poetry and then quit, we could even stop here and call our program done. But if we wanted some re-usable code, some code that we could embed in a larger program that needs to download some poetry but also do other things, then we still have some work to do. In <A href="http://krondo.com/blog/?p=1595">Part 6</A> we'll take a first stab at it.
    <H3>Suggested Exercises
    <OL>
    * Use <CODE>callLater</CODE> to make the client timeout if a poem hasn't finished after a given interval. Use the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L1321"><CODE>loseConnection</CODE></A> method on the transport to close the connection on a timeout, and don't forget to cancel the timeout if the poem finishes on time.
    * Use the stacktrace method to analyze the callback sequence that occurs when <CODE>connectionLost</CODE> is invoked.
    </OL>
