====================== 
7 부 : Deferred 소개 
====================== 

콜백과 그 결과 
---------------------- 
": doc :`p06`"는 다음과 같은 사실에 도착했습니다. 콜백은 비동기 프로그래밍의 초석입니다. reactor과 마주 방법 일뿐 아니라 콜백은 우리가 쓰는 어떤 Twisted 프로그램의 구성도 짜 포함합니다. Twisted 숙소 같은 reactor 기반 비동기 시스템을 사용할 때도 우리의 코드를 특정 방식으로 구성하는 것이 의미합니다. reactor 루프가 호출 일련의 콜백 체인으로합니다. 

`get_poetry <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L81>`_ 함수 정도 간단한 API조차도 두 통화 백을 요청합니다. 하나는 보통의 결과에 대한 것이고 다른 하나는 오류에 대한 것이다. Twisted 프로그래머로서 이들을 최대한 잘 다룰 수있게 돼서는 안되기 때문에 콜백 가장 좋은 방법이나, 앞으로 우연히 만날지도 모른다 함정에 대하여 생각에 조금 시간을 할애 할 것입니다. 

클라이언트 3.1에서 가져온``get_poetry``의 Twisted 버전에 대해 생각해 봅시다. 
: 

     ... 
     def got_poem (poem) : 
         print poem 
         reactor.stop () 

     def poem_failed (err) : 
         print >> sys.stderr 'poem download failed' 
         print >> sys.stderr 'I am terribly sorry' 
         print >> sys.stderr 'try again later?' 
         reactor.stop () 

     get_poetry (host, port, got_poem, poem_failed) 

     reactor.run () 

여기에서 기본적인 생각은 분명하네요. 

#.시를 얻으면 출력하십시오. 
#.시를 얻을 수없는 경우 오류의 하이쿠를 출력하십시오. 
#. 두 경우 모두 프로그램을 중지하십시오. 

상기 동기화 버전은 이런 느낌일까요? 
: 

     ... 
     try : 
         poem = get_poetry (host, port) # the synchronous version of get_poetry 
     except Exception, err : 
         print >> sys.stderr 'poem download failed' 
         print >> sys.stderr 'I am terribly sorry' 
         print >> sys.stderr 'try again later?' 
         sys.exit () 
     else : 
         print poem 
         sys.exit () 

콜백은`else`` 절에서 오류에 대한 콜백``except`` 같은 것입니다. 오류에 대한 콜백 호출은 비동기에서는 예외를 발생시키는 것으로 일반적으로 콜백은 일반적인 제어 흐름에 해당합니다. 

이 두 버전의 차이점은 무엇입니까? 하나는 동기화 버전에서는 Python 인터프리터가 다음을 보장합니다. ``get_poetry``이 어떤 이유로 어떤 종류의 예외를 발생 시키려고도,`except`` 블록은 실행됩니다. 인터프리터가 Python 코드를 정확하게 실행 해 준다고 믿는다면 오류 블록은 적절한 때에 실행되는 것입니다. 

비동기 버전과 비교하여 봅시다. ``poem_failed`` 오류에 대한 콜백은 "우리의"코드라고합니다. `PoetryClientFactory <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66>`_ 노`clientConnectionFailed <http://github.com /jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L77>`_ 메소드입니다. 무언가가 잘못되면 오류 코드를 확실히 실행시키는 것은 Python 아니라 우리의 책임입니다. 따라서``Failure`` 개체를 동반 한 오류에 대한 콜백을 호출 할 때는 가능한 모든 에러 케이스를 취급 할 수 있도록하지 않으면 안됩니다. 그렇지 않다면, 프로그램은 결코 다다를 수없는 콜백을 기다리고 스택 버립니다. 

이것은 동기와 비동기의 또 다른 차이점을 보여줍니다. 만약 비동기 버전에서 예외를 catch해야 (``try / except``없이), Python 인터프리터가 그것을 캐치 해 오류를 표시하고 종료했다 것입니다. 그러나``PoetryClientFactory`` 오류에 대한 콜백의 호출을 귀찮은 따라서 생략하는 경우 우리의 프로그램은 끝없이 계속 작동 것입니다. 자못 아무것도 일어나지 않은 것처럼. 

분명히 비동기 프로그램의 오류 처리는 중요하며 약간 까다 롭습니다. 비동기 코드에서 오류를 처리하는 것은 사실 일반적인 경우를 처리보다 훨씬 더 중요 할지도 모릅니다. 잘 될 때보다 훨씬 모레의 방향으로 가고 있기 때문이다. 오류 처리를 잊을 수는 Twisted를 사용한 프로그래밍의 일반적인 실수입니다. 

상기 동기화 버전의 코드에 대한 또 다른 사실도 있습니다. ``else`` 블록이 단 한 번만 실행되거나``except`` 블록이 단 한 번만 실행되는지 중 하나입니다 (동기화 버전``get_poetry`` 무한 루프에 빠지지 않는다고 생각 두십시오). Python 인터프리터는 둘 다 실행하는지``else`` 블록을 27 회 수행하는지, 즉시 결정 없습니다. 기본적으로 Python 프로그램에서 이렇게하는 것은 불가능합니다. 

그러나 우리가 콜백 또는 오류에 대한 콜백을 실행할 책임이있는 비동기의 경우에 대해 다시 생각해 봅시다. 기억할지 모르지만 몇 가지 실수를하고 있을지도 모릅니다. 콜백 및 오류에 대한 콜백을 모두 호출 할 수 있었고, 콜백 만 27 번 호출 할 수있었습니다. 이것은``get_poetry``를 사용하는 사람은 불행한 결과가되어 버립니다. docstring 명시 적으로 언급하지 않지만, 다음의 것은 말하지 않고 실제로 실행되어 버립니다. ``try / except`` 절에있는``else``와``except`` 블록처럼``get_poetry``의 각각의 호출에서 콜백이 단 한 번만 실행되거나 오류에 대한 호출 백이 단 한 번만 실행됩니다. 시를 받거나받지 않는가의 어느 쪽 일까입니다. 

세시를 요구하고 7 회 콜백 호출과 2 번의 오류에 대한 콜백 호출이 맞는 프로그램을 디버깅하려고하는 곳을 상상하라. 어디서부터 시작할까요? 아마 콜백 및 오류에 대한 콜백을 모두 같은``get_poetry`` 호출에 두 번째 호출이있을 때를 감지하고 예외를 송출하도록 작성하려고 할 것입니다. ``get_poetry``를 그런 느낌으로하자. 

또 볼 것이 있습니다. 두 버전 모두 일부 중복 된 코드가 있습니다. 비동기 버전은 두``reactor.stop`` 호출이 동기화 버전은`sys.exit`` 있습니다. 동기화 버전은 이런 식으로 리팩토링할까요. 
: 

     ... 
     try : 
         poem = get_poetry (host, port) # the synchronous version of get_poetry 
     except Exception, err : 
         print >> sys.stderr 'poem download failed' 
         print >> sys.stderr 'I am terribly sorry' 
         print >> sys.stderr 'try again later?' 
     else : 
         print poem 

     sys.exit () 

비슷한 방법으로 비동기 버전도 리팩토링 수 있을까요? 실은 명확하게하지 않습니다. 콜백 및 오류에 대한 콜백은 두 가지 함수이기 때문입니다. 는 단일 콜백에 반환하지 않으면 안되는 것일까 요? 

아무튼. 콜백을 사용 프로그래밍에 대해 알게 된 것들 중 일부로서 다음의 것이 있습니다. 

# 오류에 대한 콜백을 호출 할 중요합니다. 오류에 대한 콜백``except`` 블록의 위치를 차지하고 있기 때문에, 사용자는 그들에 의존 할 수 있어야합니다. 우리의 API는 선택적 기능 등은 없습니다. 
#. 잘못되면 콜백을 호출하지 정시에 호출하는 것과 같이 중요합니다. 전형적인 유스 케이스에서 콜백 및 오류에 대한 콜백은 서로 배타적 단 한 번만 호출됩니다. 
# 콜백을 사용하면 일반적인 코드의 리팩토링도 어려울지도 모릅니다. 

나중 부분에서 콜백에 대해 자세히 설명하고 있습니다. 그러나 지금은 Twisted에는 이러한 것을 어떻게 든하기위한 추상화있는 이유가 알면 충분합니다. 

지연 개체 
---------------- 
비동기 프로그래밍 콜백이 많이 사용되고 있으며, 그들을 제대로 사용하는 것은 다소 까다로운이 될 수 있으므로 Twisted 개발자는 콜백을 사용 프로그래밍을 쉽게하기 위해``Deferred``라는 추상화 을 만들었습니다. ``Deferred`` 클래스는`twisted.internet.defer <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L132>`_에서 정의 되어 있습니다. 

     "deferred"라는 말은 오늘의 영어의 동사 또는 형용사 중 하나입니다. 명사로 사용하는 것은 약간 이상하게 생각 될지도 모릅니다. 
     여기에서 내가 "the deferred"또는 "a deferred"라는 문구를 사용할 때는``Deferred`` 클래스의 인스턴스를 가리킨다 고 생각합니다 
     . 왜``Deferred``라는지를 곳마다 파트에서보고 갑시다. 
     "the deferred result"처럼 각각의 문구에 "result"(결과)라는 말을 덧붙였다 보면 이해에 도움이 될지도 모릅니다. 
     때때로 보게됩니다 만, 실제로 그것이 무엇인지는 코트입니다. (역주 : 명사로 사용 "deferred"는 "지연 개체"클래스 이름으로 사용되는 "Deferred"는 그대로 표기합니다.) 

지연 객체는 콜백 체인의 쌍을 가지고 있습니다. 하나는 보통의 결과에 대한 것이고 다른 하나는 오류에 대한 것입니다. 새롭게 생성 된 지연 객체는 두 하늘의 체인이 있습니다. 콜백 및 오류에 대한 콜백을 붙여서 체인을 활성화하고 정상적인 결과 (시이 도착했다는 것입니다) 또는 예외 (시를 얻을 수 없었기 때문에 그 이유) 중 하나와 함께 지연 오브젝트를 작동 (역주 : fire)시킵니다. 지연 개체를 작동 시키면 적절한 콜백 또는 오류에 대한 콜백을 그것이 추가 된 순서대로 호출합니다. 그림 12은 지연 객체와 콜백 및 오류에 대한 콜백을 나타냅니다. 

.. _figure12 : 

.. figure :: images / p07_deferred-1.png 

     그림 12 : 지연 개체 


실제로 구현하여 봅시다. 지연 개체 reactor를 사용하지 않으므로 루프를 시작하지 않고 테스트 할 수 있습니다. 

     ``Deferred`` 클래스에 reactor를 사용``setTimeout``라는 메소드에 발견 할 수도 있습니다. 그것은 오래 사용에서 릴리스에서는 존재하지 않을 것입니다. 깊이 설명하지 않고 사용하지 말아주세요. 

첫 번째 예는`twisted-deferred / defer-1.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-1.py>`_이 있습니다. 
: 

     from twisted.internet.defer import Deferred 

     def got_poem (res) : 
         print 'Your poem is served' 
         print res 

     def poem_failed (err) : 
         print 'No poetry for you.' 

     d = Deferred () 

     # add a callback / errback pair to the chain 
     d.addCallbacks (got_poem, poem_failed) 

     # fire the chain with a normal result 
     d.callback ( 'This poem is short.') 

     print "Finished" 

이 코드는 새로운 지연 개체를 만들고``addCallbacks`` 메소드에 의해 콜백 및 오류에 대한 콜백 쌍을 추가하고``callback`` 메소드에서 보통의 결과에 대한 체인을 시작합니다. 물론 하나의 콜백 만 가지고 있지 않으므로 체인은 아니지만, 여기에 문제가 없습니다. 코드를 실행시켜 보면 다음과 같은 결과를 얻을 수 있습니다. 

: 

     Your poem is served : 
     This poem is short. 
     Finished 

간단하네요. 하지만주의해야 할 몇 가지 있습니다. 

# 클라이언트 3.1에서 사용한 콜백 및 오류에 대한 콜백 쌍처럼 우리가 지연 개체 덧붙였다 콜백은 각각 하나의 인수를 취합니다. 
    보통의 결과 또는 오류의 결과 중 하나입니다. 지연 개체는 여러 인수를 지원하는 것도 분명히하고 있습니다 만, 언제나 적어도 하나는 필요하고 첫 번째 인수는 정상적인 결과 또는 오류 중 하나입니다. 
# 지연 객체는 콜백 및 오류에 대한 콜백을 쌍을 추가합니다. 
#``callback`` 메서드는 지연된 개체의 일반적 결과가 발생합니다. 메소드의 인수가 그 결과입니다. 
#``print``가 출력하는 순서를 보면, 지연 개체에 신호를 보내면 즉시 콜백을 호출하는 것을 알 수 있습니다. 
    비동기 적으로 실행되는 부분이 존재하지 않습니다. reactor가 작동하지 않기 때문에 당연합니다. 이른바 Python의 함수 호출과 다르지 않습니다. 

그러면 다음 진행하자. `twisted-deferred / defer-2.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-2.py>`_ 예에서 지연 개체의 오류에 대한 호출 백 체인을 실행시킵니다. 
: 

     from twisted.internet.defer import Deferred 
     from twisted.python.failure import Failure 

     def got_poem (res) : 
         print 'Your poem is served' 
         print res 

     def poem_failed (err) : 
         print 'No poetry for you.' 

     d = Deferred () 

     # add a callback / errback pair to the chain 
     d.addCallbacks (got_poem, poem_failed) 

     # fire the chain with an error result 
     d.errback (Failure (Exception ( 'I have failed'))) 

     print "Finished" 

스크립트를 실행 해 보면 다음과 같은 결과가 될 것입니다. 
: 

     No poetry for you. 
     Finished 

오류에 대한 콜백 체인을 시작하려면``callback`` 방법이 아니라``errback`` 메서드를 호출 인수는 오류 결과입니다. 콜백과 마찬가지로 신호가 있으면 즉시 호출됩니다. 

이전 예제에서는 클라이언트 3.1에서 그랬던 것처럼``Failure`` 객체를``errback`` 메서드에 전달했습니다. 이것은 이것대로 좋지만, 지연 객체는`Exception``을``Failure``로 변환 해줍니다. `twisted-deferred / defer-3.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-3.py>`_를보세요. 
: 

     from twisted.internet.defer import Deferred 

     def got_poem (res) : 
         print 'Your poem is served' 
         print res 

     def poem_failed (err) : 
         print err .__ class__ 
         print err 
         print 'No poetry for you.' 

     d = Deferred () 

     # add a callback / errback pair to the chain 
     d.addCallbacks (got_poem, poem_failed) 

     # fire the chain with an error result 
     d.errback (Exception ( 'I have failed')) 

여기에서는 일반적으로``Exception``을``errback``에 전달합니다. 오류에 대한 콜백에서 해당 클래스 및 오류 결과 자체를 출력합니다. 
이런 출력됩니다. 
: 

     twisted.python.failure.Failure 
     [Failure instance : Traceback (failure with no frames) : I have failed. 
     ] 
     No poetry for you. 

     역주 : 처리 계 또는 버전에 따라 "type"이 출력 될지도 모릅니다. 
     : 

         twisted.python.failure.Failure 
         [Failure instance : Traceback (failure with no frames) : & lt; type 'exceptions.Excepti 
         on '& gt; : I have failed. 
         ] 
         No poetry for you. 

이것은 지연 개체를 사용할 때는 원래의`Exception``를 다루면 충분``Failure``는 자동으로 생성된다는 것을 의미합니다. 지연 개체는 각각의 오류에 대한 콜백이``Failure`` 인스턴스와 함께 호출되는 것을 보장하여주는 것입니다. 

지금까지``callback``에 진행된 경우와``errback``에 진행된 경우를보고 왔습니다. 좋은 엔지니어가 그러 하듯이 반복해서보고 싶어 했나요? 코드를 더 간결하게하기 위해서``lambda``를 사용하여 콜백을 추가하여 봅시다. `twisted-deferred / defer-4.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-4.py>`_를보세요. 
: 

     from twisted.internet.defer import Deferred 
     def out (s) : print s 
     d = Deferred () 
     d.addCallbacks (lambda r : out (r), lambda e : out (e)) 
     d.callback ( 'First result') 
     d.callback ( 'Second result') 
     print 'Finished' 

그러면 다음과 같은 출력을 얻을 수 있습니다. 
: 

     First result 
     Traceback (most recent call last) : 
       ... 
     twisted.internet.defer.AlreadyCalledError 

이것은 재밌 네요! 지연 개체가 성공적 계의 콜백을 두 번 호출 해주지 않습니다. 사실, 지연 객체는 그것이 무엇이든 두 번 호출되지 않습니다. 이 예를 실제로보세요. 

*`twisted-deferred-4.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-4.py>`_ 
*`twisted-deferred-5.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-5.py>`_ 
*`twisted-deferred-6.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-6.py>`_ 
*`twisted-deferred-7.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-7.py>`_ 

마지막``print`` 문장은 하나라고도 않은 점에 유의하십시오. ``callback``와``errback`` 메소드는 진정한``Exception``를 전달하고 지연 개체를 이미 수행했다고 알려줍니다. 콜백 프로그래밍에서는 일반적인 함정 중 하나입니다. 지연 개체는 그 함정에 우리가 떨어져 버리지 않게 해줍니다. 콜백을 관리하기 위해 지연 개체를 사용하여 콜백 및 오류에 대한 콜백 모두를 호출 해 버리는 실수를하지 않으며 콜백을 27 번 호출 버릴 수도 없습니다. 해보면 알겠지만, 지연 개체는 즉시 예외를 전달합니다. 잘못된 호출을 콜백 자체에 전달 버리는 것은 아닙니다. 

그럼 지연 개체는 비동기 코드 리팩토링 도움이 될 것입니까? `twisted-deferred / defer-8.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-8.py>`_의 예로 생각해 봅시다 . 
: 

     import sys 

     from twisted.internet.defer import Deferred 

     def got_poem (poem) : 
         print poem 
         from twisted.internet import reactor 
         reactor.stop () 

     def poem_failed (err) : 
         print >> sys.stderr 'poem download failed' 
         print >> sys.stderr 'I am terribly sorry' 
         print >> sys.stderr 'try again later?' 
         from twisted.internet import reactor 
         reactor.stop () 

     d = Deferred () 

     d.addCallbacks (got_poem, poem_failed) 

     from twisted.internet import reactor 

     reactor.callWhenRunning (d.callback 'Another short poem.') 

     reactor.run () 

기본적으로 먼저 보여준 원래의 예제와 함께하지만 reactor를 이동 추가 코드가 있습니다. reactor가 움직이기 시작한 후에 지연 개체에 명령을 조종하기 위해`callWhenRunning <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L766> `_를 사용하는 것에주의하십시오. ``callWhenRunning``는 그것이 작동 할 때 콜백에 전달하는 키워드 인수를 추가로받을 수 있다는 것을 활용하고 있습니다. 콜백을 등록하는 많은 Twisted API는 같은 습관에 따릅니다. 지연 객체에 콜백을 추가하는 API도 마찬가지입니다. 

콜백 및 오류에 대한 콜백 모두 reactor를 정지시킵니다. 지연 개체가 성공적 계의 콜백 및 오류에 대한 콜백 체인을 지원하고 있기 때문에, 일반적인 코드를 체인의 두 번째 링크에 리팩토링 수 있습니다. `twisted-deferred / defer-9.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-9.py>`_에서 소개하는 기술입니다. 
: 

     import sys 

     from twisted.internet.defer import Deferred 

     def got_poem (poem) : 
         print poem 

     def poem_failed (err) : 
         print >> sys.stderr 'poem download failed' 
         print >> sys.stderr 'I am terribly sorry' 
         print >> sys.stderr 'try again later?' 

     def poem_done (_) : 
         from twisted.internet import reactor 
         reactor.stop () 

     d = Deferred () 

     d.addCallbacks (got_poem, poem_failed) 
     d.addBoth (poem_done) 

     from twisted.internet import reactor 

     reactor.callWhenRunning (d.callback 'Another short poem.') 

     reactor.run () 

``addBoth`` 메소드는 같은 함수를 콜백 체인 및 오류에 대한 콜백 체인에 모두 추가합니다. 이렇게 비동기 코드를 리팩토링 수 있었어요. 

     ** 주 **이 지연 개체 오류에 대한 콜백 체인을 실행하는 경우가 있습니다. 
     이것에 대해서는 곳마다 파트에서 논의되지만 우선, 지연 개체에 대해 배울 게 많이 있다고 간에게 분부하십시오. 

정리 
------ 
이 파트에서는 콜백을 사용한 프로그래밍을 깊이 파기하고 몇 가지 잠재적 인 문제점을 인식했습니다. 또한``Deferred`` 클래스가 얼마나 우리를 도와 줄지도보고 왔습니다. 

# 오류에 대한 콜백은 무시할 수 없습니다. 모든 비동기 API에서 필수입니다. 지연 개체는 이것에 대한 지원이 포함되어 있습니다. 
# 콜백을 여러 번 호출하면 난해하고 디버깅이 어려운 문제가 발생하기 쉽습니다. 
# 단순 콜백을 이용한 프로그래밍 리팩토링 까다로운 해 버립니다. 지연 개체를 사용하여 콜백 체인에 링크를 추가하고 링크를 다른 위치로 이동시키는 것으로 리팩토링 수 있습니다. 

지연 개체 관련된 화제는 포함되지 않습니다. 탐구해야 할 원칙과 행동은 아직도 있습니다. 그러나시 클라이언트에서 시작하려면 충분하다고 할 수 있습니다. ": doc :`p08`"으로하고 봅시다. 

추천 연습 문제 
------------------ 
# 마지막 예에서는``poem_done``에 인수를 무시합니다. 출력시켜보십시오. ``get_poem``가 값을 반환하면이 수``poem_done``의 인수를 어떻게 바꿀 것인가를 생각해보십시오. 
# 마지막 두 지연 객체를 사용한 예는 오류 용 콜백 체인을 실행하도록 수정하십시오. ``Exception``를 인수로 오류에 대한 콜백을 움직이게 해주세요. 
#``Deferred`` 클래스의`addCallback <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L189>`_와`addErrback < http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L192>`_ 메소드의 docstring을 읽어보십시오.

..
    <H2>Part 7: An Interlude,&nbsp; Deferred
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Callbacks and Their Consequences
    In <A href="http://krondo.com/blog/?p=1595">Part 6</A> we came face-to-face with this fact: callbacks are a fundamental aspect of asynchronous programming. Rather than just a way of interfacing with the reactor, callbacks will be woven into the structure of any Twisted program we write. So using Twisted, or any reactor-based asynchronous system, means organizing our code in a particular way, as a series of "callback chains" invoked by a reactor loop.
    Even an API as simple as our <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L81"><CODE>get_poetry</CODE></A> function required callbacks, two of them in fact: one for normal results and one for errors. Since, as Twisted programmers, we’re going to have to make so much use of them, we should spend a little bit of time thinking about the best ways to use callbacks, and what sort of pitfalls we might encounter.
    Consider this piece of code that uses the Twisted version of <CODE>get_poetry</CODE> from client 3.1:
    ...
    def got_poem(poem):
        print poem
        reactor.stop()

    def poem_failed(err):
        print &gt;&gt;sys.stderr, 'poem download failed'
        print &gt;&gt;sys.stderr, 'I am terribly sorry'
        print &gt;&gt;sys.stderr, 'try again later?'
        reactor.stop()

    get_poetry(host, port, got_poem, poem_failed)

    reactor.run()
    The basic plan here is clear:
    <OL>
    * If we get the poem, print it out.
    * If we don’t get the poem, print out an Error Haiku.
    * In either case, end the program.
    </OL>
    The ’synchronous analogue’ to the above code might look something like this:
    ...
    try:
        poem = get_poetry(host, port) # the synchronous version of get_poetry
    except Exception, err:
        print &gt;&gt;sys.stderr, 'poem download failed'
        print &gt;&gt;sys.stderr, 'I am terribly sorry'
        print &gt;&gt;sys.stderr, 'try again later?'
        sys.exit()
    else:
        print poem
        sys.exit()
    So the callback is like the <CODE>else</CODE> block and the errback is like the <CODE>except</CODE>. That means invoking the errback is the asynchronous analogue to raising an exception and invoking the callback corresponds to the normal program flow.
    What are some of the differences between the two versions? For one thing, in the synchronous version the Python interpreter will ensure that, as long as <CODE>get_poetry</CODE> raises any kind of exception at all, for any reason, the <CODE>except</CODE> block will run. If we trust the interpreter to run Python code correctly we can trust that error block to run at the right time.
    Contrast that with the asynchronous version: the <CODE>poem_failed</CODE> errback is invoked by <EM>our</EM> code, the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L77"><CODE>clientConnectionFailed</CODE></A> method of the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-3/get-poetry-1.py#L66"><CODE>PoetryClientFactory</CODE></A>. We, not Python, are in charge of making sure the error code runs if something goes wrong. So we have to make sure to handle every possible error case by invoking the errback with a <CODE>Failure</CODE> object. Otherwise, our program will become "stuck" waiting for a callback that never comes.
    That shows another difference between the synchronous and asynchronous versions. If we didn’t bother catching the exception in the synchronous version (by not using a <CODE>try</CODE>/<CODE>except</CODE>), the Python interpreter would "catch" it for us and crash to show us the error of our ways. But if we don’t bother calling the errback function in <CODE>PoetryClientFactory</CODE>, our program will just run forever, blissfully unaware that anything is amiss.
    Clearly, handling errors in an asynchronous program is important, and also somewhat tricky. You might say that handling errors in asynchronous code is actually more important than handling the normal case, as things can go wrong in far more ways than they can go right. Forgetting to handle the error case is a common mistake when programming with Twisted.
    Here’s another fact about the synchronous code above: either the <CODE>else</CODE> block runs exactly once, or the <CODE>except</CODE> block runs exactly once (assuming the synchronous version of <CODE>get_poetry</CODE> doesn’t enter an infinite loop). The Python interpreter won’t suddenly decide to run them both or, on a whim, run the <CODE>else</CODE> block twenty-seven times. And it would be basically impossible to program in Python if it did!
    But again, in the asynchronous case <EM>we</EM> are in charge of running the callback or the errback. Knowing us, we might make some mistakes. We could call both the callback and the errback, or invoke the callback twenty-seven times. That would be unfortunate for the users of <CODE>get_poetry</CODE>. Although the docstring doesn’t explicitly say so, it really goes without saying that, like the <CODE>else</CODE> and <CODE>except</CODE> blocks in a <CODE>try</CODE>/<CODE>except</CODE> statement, either the callback will run exactly once or the errback will run exactly once, for each specific call to <CODE>get_poetry</CODE>. Either we get the poem or we don’t.
    Imagine trying to debug a program that makes three poetry requests and gets seven callback invocations and two errback invocations. Where would you even start? You’d probably end up writing your callbacks and errbacks to detect when they got invoked a second time for the same <CODE>get_poetry</CODE> call and throw an exception right back. Take that, <CODE>get_poetry</CODE>.
    One more observation: both versions have some duplicate code. The asynchronous version has two calls to <CODE>reactor.stop</CODE> and the synchronous version has two calls to <CODE>sys.exit</CODE>. We might refactor the synchronous version like this:
    ...
    try:
        poem = get_poetry(host, port) # the synchronous version of get_poetry
    except Exception, err:
        print &gt;&gt;sys.stderr, 'poem download failed'
        print &gt;&gt;sys.stderr, 'I am terribly sorry'
        print &gt;&gt;sys.stderr, 'try again later?'
    else:
        print poem

    sys.exit()
    Can we refactor the asynchronous version in a similar way? It’s not really clear that we can, since the callback and errback are two different functions. Do we have to go back to a single callback to make this possible?
    Ok, here are some of the insights we’ve discovered about programming with callbacks:
    <OL>
    * Calling errbacks is very important. Since errbacks take the place of <CODE>except</CODE> blocks, users need to be able to count on them. They aren’t an optional feature of our APIs.
    * <EM>Not</EM> invoking callbacks at the wrong time is just as important as calling them at the right time. For a typical use case, the callback and errback are mutually exclusive and invoked exactly once.
    * Refactoring common code might be harder when using callbacks.
    </OL>
    We’ll have more to say about callbacks in future Parts, but for now this is enough to see why Twisted might have an abstraction devoted to managing them.
    <H3>The Deferred
    Since callbacks are used so much in asynchronous programming, and since using them correctly can, as we have discovered, be a bit tricky, the Twisted developers created an abstraction called a <CODE>Deferred</CODE> to make programming with callbacks easier. The <CODE>Deferred</CODE> class is defined in <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L132"><CODE>twisted.internet.defer</CODE></A>.
    <P style="padding-left: 30px;">The word "deferred" is either a verb or an adjective in everyday English, so it might sound a little strange used as a noun. Just know that, from now on, when I use the phrase "the deferred" or "a deferred", I’m referring to an instance of the <CODE>Deferred</CODE> class. We’ll talk about why it is called <CODE>Deferred</CODE> in a future Part. It might help to mentally add the word "result" to each phrase, as in "the deferred result". As we will eventually see, that’s really what it is.
    A deferred contains a pair of callback chains, one for normal results and one for errors. A newly-created deferred has two empty chains. We can populate the chains by adding callbacks and errbacks and then <EM>fire</EM> the deferred with either a normal result (here’s your poem!) or an exception (I couldn’t get the poem, and here’s why). Firing the deferred will invoke the appropriate callbacks or errbacks in the order they were added. Figure 12 illustrates a deferred instance with its callback/errback chains:<A name="figure12"></A>
    <DIV id="attachment_1763" class="wp-caption aligncenter" style="width: 646px"><A href="./part7_files/deferred-1.png"><IMG class="size-full wp-image-1763" title="Figure 12: A Deferred" src="./part7_files/deferred-1.png" alt="Figure 12: A Deferred" width="636" height="325"></A><P class="wp-caption-text">Figure 12: A Deferred</DIV>
    Let’s try this out. Since deferreds don’t use the reactor, we can test them out without starting up the loop.
    <P style="padding-left: 30px;">You might have noticed a method on <CODE>Deferred</CODE> called <CODE>setTimeout</CODE> that does use the reactor. It is deprecated and will cease to exist in a future release. Pretend it’s not there and don’t use it.
    Our first example is in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-1.py"><TT>twisted-deferred/defer-1.py</TT></A>:
    from twisted.internet.defer import Deferred

    def got_poem(res):
        print 'Your poem is served:'
        print res

    def poem_failed(err):
        print 'No poetry for you.'

    d = Deferred()

    # add a callback/errback pair to the chain
    d.addCallbacks(got_poem, poem_failed)

    # fire the chain with a normal result
    d.callback('This poem is short.')

    print "Finished"
    This code makes a new deferred, adds a callback/errback pair with the <CODE>addCallbacks</CODE> method, and then fires the "normal result" chain with the <CODE>callback</CODE> method. Of course, it’s not much of a chain since it only has a single callback, but no matter. Run the code and it produces this output:
    Your poem is served:
    This poem is short.
    Finished
    That’s pretty simple. Here are some things to notice:
    <OL>
    * Just like the callback/errback pairs we used in client 3.1, the callbacks we add to this deferred each take one argument, either a normal result or an error result. It turns out that deferreds support callbacks and errbacks with multiple arguments, but they always have at least one, and the first argument is always either a normal result or an error result.
    * We add callbacks and errbacks to the deferred in pairs.
    * The <CODE>callback</CODE> method fires the deferred with a normal result, the method’s only argument.
    * Looking at the order of the <CODE>print</CODE> output, we can see that firing the deferred invokes the callbacks immediately. There’s nothing asynchronous going on at all. There can’t be, since no reactor is running. It really boils down to an ordinary Python function call.
    </OL>
    Ok, let’s push the other button. The example in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-2.py"><TT>twisted-deferred/defer-2.py</TT></A> fires the deferred’s errback chain:
    from twisted.internet.defer import Deferred
    from twisted.python.failure import Failure

    def got_poem(res):
        print 'Your poem is served:'
        print res

    def poem_failed(err):
        print 'No poetry for you.'

    d = Deferred()

    # add a callback/errback pair to the chain
    d.addCallbacks(got_poem, poem_failed)

    # fire the chain with an error result
    d.errback(Failure(Exception('I have failed.')))

    print "Finished"
    And after running that script we get this output:
    No poetry for you.
    Finished
    So firing the errback chain is just a matter of calling the <CODE>errback</CODE> method instead of the <CODE>callback</CODE> method, and the method argument is the error result. And just as with callbacks, the errbacks are invoked immediately upon firing.
    In the previous example we are passing a <CODE>Failure</CODE> object to the <CODE>errback</CODE> method like we did in client 3.1. That’s just fine, but a deferred will turn ordinary <CODE>Exception</CODE>s into <CODE>Failure</CODE>s for us. We can see that with <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-3.py"><TT>twisted-deferred/defer-3.py</TT></A>:
    from twisted.internet.defer import Deferred

    def got_poem(res):
        print 'Your poem is served:'
        print res

    def poem_failed(err):
        print err.__class__
        print err
        print 'No poetry for you.'

    d = Deferred()

    # add a callback/errback pair to the chain
    d.addCallbacks(got_poem, poem_failed)

    # fire the chain with an error result
    d.errback(Exception('I have failed.'))
    Here we are passing a regular <CODE>Exception</CODE> to the <CODE>errback</CODE> method. In the errback, we are printing out the class and the error result itself. We get this output:
    twisted.python.failure.Failure
    [Failure instance: Traceback (failure with no frames): : I have failed.
    ]
    No poetry for you.
    This means when we use deferreds we can go back to working with ordinary <CODE>Exception</CODE>s and the <CODE>Failure</CODE>s will get created for us automatically. A deferred will guarantee that each errback is invoked with an actual <CODE>Failure</CODE> instance.
    We tried pressing the <CODE>callback</CODE> button and we tried pressing the <CODE>errback</CODE> button. Like any good engineer, you probably want to start pressing them over and over. To make the code shorter, we’ll use <CODE>lambda</CODE>s to add our callbacks. Check out <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-4.py"><TT>twisted-deferred/defer-4.py</TT></A>:
    from twisted.internet.defer import Deferred
    def out(s): print s
    d = Deferred()
    d.addCallbacks(lambda r: out(r), lambda e: out(e))
    d.callback('First result')
    d.callback('Second result')
    print 'Finished'
    Now we get this output:
    First result
    Traceback (most recent call last):
      ...
    twisted.internet.defer.AlreadyCalledError
    This is interesting! A deferred will not let us fire the normal result callbacks a second time. In fact, a deferred cannot be fired a second time no matter what, as demonstrated by these examples:
    <UL>
    * <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-4.py"><TT>twisted-deferred/defer-4.py</TT></A>
    * <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-5.py"><TT>twisted-deferred/defer-5.py</TT></A>
    * <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-6.py"><TT>twisted-deferred/defer-6.py</TT></A>
    * <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-7.py"><TT>twisted-deferred/defer-7.py</TT></A>
    </UL>
    Notice those final <CODE>print</CODE> statements are never called. The <CODE>callback</CODE> and <CODE>errback</CODE> methods are raising genuine <CODE>Exception</CODE>s to let us know we’ve already fired that deferred. Deferreds help us avoid one of the pitfalls we identified with callback programming. When we use a deferred to manage our callbacks, we simply can’t make the mistake of calling both the callback and the errback, or invoking the callback twenty-seven times. We can try, but the deferred will raise an exception right back at us, instead of passing our mistake onto the callbacks themselves.
    Can deferreds help us to refactor asynchronous code? Consider the example in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-8.py"><TT>twisted-deferred/defer-8.py</TT></A>:
    import sys

    from twisted.internet.defer import Deferred

    def got_poem(poem):
        print poem
        from twisted.internet import reactor
        reactor.stop()

    def poem_failed(err):
        print &gt;&gt;sys.stderr, 'poem download failed'
        print &gt;&gt;sys.stderr, 'I am terribly sorry'
        print &gt;&gt;sys.stderr, 'try again later?'
        from twisted.internet import reactor
        reactor.stop()

    d = Deferred()

    d.addCallbacks(got_poem, poem_failed)

    from twisted.internet import reactor

    reactor.callWhenRunning(d.callback, 'Another short poem.')

    reactor.run()
    This is basically our original example above, with a little extra code to get the reactor going. Notice we are using <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L766"><CODE>callWhenRunning</CODE></A> to fire the deferred after the reactor starts up. We’re taking advantage of the fact that <CODE>callWhenRunning</CODE> accepts additional positional- and keyword-arguments to pass to the callback when it is run. Many Twisted APIs that register callbacks follow this same convention, including the APIs to add callbacks to deferreds.
    Both the callback and the errback stop the reactor. Since deferreds support chains of callbacks and errbacks, we can refactor the common code into a second link in the chains, a technique illustrated in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-deferred/defer-9.py"><TT>twisted-deferred/defer-9.py</TT></A>:
    import sys

    from twisted.internet.defer import Deferred

    def got_poem(poem):
        print poem

    def poem_failed(err):
        print &gt;&gt;sys.stderr, 'poem download failed'
        print &gt;&gt;sys.stderr, 'I am terribly sorry'
        print &gt;&gt;sys.stderr, 'try again later?'

    def poem_done(_):
        from twisted.internet import reactor
        reactor.stop()

    d = Deferred()

    d.addCallbacks(got_poem, poem_failed)
    d.addBoth(poem_done)

    from twisted.internet import reactor

    reactor.callWhenRunning(d.callback, 'Another short poem.')

    reactor.run()
    The <CODE>addBoth</CODE> method adds the same function to both the callback and errback chains. And we can refactor asynchronous code after all.
    <P style="padding-left: 30px;"><STRONG>Note:</STRONG> there is a subtlety in the way this deferred would actually execute its errback chain. We’ll discuss it in a future Part, but keep in mind there is more to learn about deferreds.
    <H3>Summary
    In this Part we analyzed callback programming and identified some potential problems. We also saw how the <CODE>Deferred</CODE> class can help us out:
    <OL>
    * We can’t ignore errbacks, they are required for any asynchronous API. Deferreds have support for errbacks built in.
    * Invoking callbacks multiple times will likely result in subtle, hard-to-debug problems. Deferreds can only be fired once, making them similar to the familiar semantics of <CODE>try</CODE>/<CODE>except</CODE> statements.
    * Programming with plain callbacks can make refactoring tricky. With deferreds, we can refactor by adding links to the chain and moving code from one link to another.
    </OL>
    We’re not done with the story of deferreds, there are more details of their rationale and behavior to explore. But we’ve got enough to start using them in our poetry client, so we’ll do that in <A href="http://krondo.com/blog/?p=1778">Part 8</A>.
    <H3>Suggested Exercises
    <OL>
    * The last example ignores the argument to <CODE>poem_done</CODE>. Print it out instead. Make <CODE>got_poem</CODE> return a value and see how that changes the argument to <CODE>poem_done</CODE>.
    * Modify the last two deferred examples to fire the errback chains. Make sure to fire the errback with an <CODE>Exception</CODE>.
    * Read the docstrings for the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L189"><CODE>addCallback</CODE></A> and <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/defer.py#L192"><CODE>addErrback</CODE></A> methods on <CODE>Deferred</CODE>.
    </OL>
