======================= 
파트 4 : Twisted로시를 
======================= 

첫 번째 Twisted 클라이언트 
--------------------------- 
Twisted는 서버를 작성하는 데 사용되는 경우가 많다 만, 클라이언트 쪽이 간단하고 가능한 한 간단한 것부터 시작 나가기로합시다. 첫 소절의 클라이언트를 Twisted를 사용하여 작성하자. 소스 코드는`twisted-client-1 / get-poetry.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py>`_이 있습니다 . 그 전에 서버를 시작합시다. 
: 

     python blocking-server / slowpoetry.py --port 10000 poetry / ecstasy.txt --num-bytes 30 
     python blocking-server / slowpoetry.py --port 10001 poetry / fascination.txt 
     python blocking-server / slowpoetry.py --port 10002 poetry / science.txt 

그러면 다음과 같이 클라이언트를 실행하여보십시오. 
: 

     python twisted-client-1 / get-poetry.py 10000 10001 10002 

다음과 같은 출력을 얻을 수 있습니다. 
: 

     Task 1 : got 60 bytes of poetry from 127.0.0.1:10000 
     Task 2 : got 10 bytes of poetry from 127.0.0.1:10001 
     Task 3 : got 10 bytes of poetry from 127.0.0.1:10002 
     Task 1 : got 30 bytes of poetry from 127.0.0.1:10000 
     Task 3 : got 10 bytes of poetry from 127.0.0.1:10002 
     Task 2 : got 10 bytes of poetry from 127.0.0.1:10001 
     ... 
     Task 1 : 3003 bytes of poetry 
     Task 2 : 623 bytes of poetry 
     Task 3 : 653 bytes of poetry 
     Got 3 poems in 0 : 00 : 10.134220 


Twisted를 사용하지 않는 비동기 클라이언트와 똑같 네요. 본질적으로 똑같은 일을하고 있기 때문에 놀라운 일이 아닙니다. 어떻게 작동하고 있는지를 이해하기 위해 소스 코드를 살펴 보겠습니다. 앞으로 논의 해 나갈 소스 코드를 확인할 수 있도록 클라이언트 파일을 편집기에서 엽니 다. 

     주의 : 1 부에서 언급했듯이 몇 가지 매우 낮은 수준의 API를 사용에서 Twisted 사용을 학습하고 있습니다. 이렇게하면 Twisted 추상화 계층을 방지하고 안쪽에서 바깥 (inside out)을 향해 Twisted 것을 배워 있습니다. 그러나 이것은 시작에 학습하는 많은 API는 실제 코드를 쓸 때는 많이 사용한다는 것을 의미합니다. 처음으로 프로그램은 연습용 과제로 기억에두고 그냥 상관하지 않습니다. 제품 수준의 소프트웨어 작성의 예는 없습니다. 

Twisted 클라이언트`PoetrySocket <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L53>`_ 개체의 집합을 생성하는 것부터 시작합니다 . PoetrySocket는 실제 네트워크 소켓을 만들고 서버에 연결하고 비 차단 모드로 전환하여 자신을 초기화합니다. 
: 

     self.sock = socket.socket (socket.AF_INET, socket.SOCK_STREAM) 
     self.sock.connect (address) 
     self.sock.setblocking (0) 

이상에서는 소켓을 직접 처리 같은 추상화 수준을 만날 수 없게 될 것입니다. 하지만 지금은 아직 필요합니다. 네트워크 연결을 설정 한 후에는`PoetrySocket`` 자신을``addReader`` 방법을 통해``reactor``에 전달합니다. 
: 

     # tell the Twisted reactor to monitor this socket for reading 
     from twisted.internet import reactor 
     reactor.addReader (self) 

이 방법은 데이터가 오는지를 감시하고 싶어요 파일 디스크립터를 Twisted에 전달합니다. 파일 디스크립터와 콜백이 아닌 객체를 Twisted에 전달하는 것은 왜일까요? 그리고 Twisted 확실히시에 특유의 코드를 가지고 있지 않은데 우리가 전달 된 개체를 처리하는 방법을 어떻게 알까요? 날 믿어주십시오. 확인 했으니 까. `twisted.internet.interfaces <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py>`_ 모듈을 열고 나를 따라 오세요 네요. 

Twisted 인터페이스 
-------------------------- 
Twisted에는``interfaces``라는 하위 모듈이 많이 있습니다. 각각``Interface`` 클래스의 집합을 정의합니다. 버전 8.0에서는 Twisted는`zope.interface <http://www.zope.org/Products/ZopeInterface>`_를 그 클래스의 base class로서 사용하고 있습니다 만,이 패키지의 자세한 내용은 우리에게 징수 て 중요하지 않습니다. 당신이 바로 눈에하고있는 것처럼, 우리가 관심있는 것은 Twisted 자신의 인터페이스의 서브 클래스입니다. 

인터페이스의 주요 목적 중 하나는 문서입니다. Python 프로그래머라면 확실히`오리 타이핑 <http://en.wikipedia.org/wiki/Duck_typing>`_에 익숙한 것입니다. 원칙적으로 객체의 형태는 클래스 계층의 위치가 아닌 외부에 공개 된 인터페이스에 의해 결정된다는 것입니다. 따라서 같은 공개 인터페이스를 나타내는 두 개의 객체 (오리처럼 걷고 오리처럼없이라는 녀석입니다)는 덕 타이핑이 고려되는 한 유사한 것 인 것입니다 (a duck!) 하지만 인터페이스는 오리처럼 걷고 란 무엇인가를 확인하는 방법은 약간 배합되어 있습니다. 

``twisted.internet.interfaces`` 소스 코드를``addReader`` 메소드의 정의까지 진행하십시오. `IReactorFDSet <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L801>`_ 인터페이스에 선언되어 다음과 같이되어 있을 것입니다. 
: 

     def addReader (reader) : 
         "" " 
         I add reader to the set of file descriptors to get read events for. 

         @param reader : An L {IReadDescriptor} provider that will be checked for 
                        read events until it is removed from the reactor with 
                        L {removeReader}. 

         @return : C {None}. 
         "" " 

``IReactorFDSet``는 Twisted의 reactor가 구현하는 인터페이스 중 하나입니다. 모든 Twisted의 reactor는 위의 docstring에 설명 된대로 움직이는``addReader``라는 메소드가 있습니다. 메소드 선언에는``self`` 인수가 없습니다. 공개 인터페이스를 선언 할 수 밖에 관여하지 않고``self`` 인수는 구현의 일부 (즉, 호출 측이``self``을 명시 적으로 전달한다는 것입니다)이기 때문입니다. 인터페이스 객체는 결코 인스턴스화되지 않으며, 실제 구현의 base class로서 사용되기도 없습니다. 

     * ** 주 1 : ** 기술적 인 것을 말하면``IReactorFDSet``는 파일 디스크립터를 기다리는 같은 reactor에 의해 구현되는 것입니다. 내가 알기로는 현재 사용 가능한 모든 reactor 구현이 있다고합니다. 
     * ** 노트 2 : ** 인터페이스는 문서 이외에도 활용할 수 있습니다. 
       ``zope.interface`` 모듈은 클래스가 하나 이상의 인터페이스를 구현하는 것을 명시 적으로 선언 할 수 있도록 런타임에 그 선언을 검증하는기구를 제공합니다. 
       적합 (adaptation)의 개념을 지원합니다. 있는 인터페이스를 직접 지원하지 않을지도 모른다 개체에 인터페이스를 동적으로 제공하는 것입니다. 하지만 진일보 한 유스 케이스는 발을 디뎌 없습니다. 
     * ** 노트 3 : ** 인터페이스와`추상 base class <http://www.python.org/dev/peps/pep-3119/>`_ 유사성 눈치 있을까요? 
       최근 들어 Python 언어기구에 추가 한 것입니다. 여기에서는 그 유사성과 차이점에 대해 생각을 진행하지 않지만, 
       Glyph의`에세이 <http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html>`_를 읽어 보는 것도 좋을 것입니다. 
       그는 Twisted 프로젝트의 창시자이며 그 에세이는 핵심에 닿는 것입니다. 

위의 docstring에 따르면``addReader``의`reader`` 인수는`IReadDescriptor`` 인터페이스를 구현하고 있어야합니다. 따라서``PoetrySocket`` 개체도 그렇게하지 않으면 안됩니다. 
이 새로운 인터페이스를 찾기 위해 모듈의 소스 코드를 스크롤 해 나가면 다음의 설명에 만납니다. 
: 

     class IReadDescriptor (IFileDescriptor) : 

         def doRead () : 
             "" " 
             Some data is available for reading on your descriptor. 
             "" " 

``PoetrySocket`` 객체의`doRead``의 구현도있을 것입니다. Twisted의 reactor에 불린 때마다 비동기 소켓에서 데이터를 읽습니다. 따라서``doRead``은 실제로 콜백입니다. 그러나 Twisted에 직접 전달하는 것이 아니라``doRead`` 메소드와 함께 객체에서 전달합니다. 이것은 Twisted 프레임 워크는 자주 쓰는 법입니다. 함수를 전달하는 것이 아니라 해당 인터페이스를 구현 한 객체를 전달합니다. 이러한 방법은 단일 인수로 관련 콜백 (인터페이스에 정의 된 메소드)의 집합을 전달할 수 있습니다. 또한 객체에 저장된 공유 상태를 통해 콜백끼리 서로 통신하게됩니다. 

그럼``PoetrySocket`` 개체에서 구현되는 다른 콜백은 무엇일까요? ``IReadDescriptor``는`IFileDescriptor`` 자식 클래스 인 것에주의하십시오. ``IReadDescriptor``를 구현하는 모든 객체는`IFileDescriptor``도 구현하지 않으면 안된다는 것입니다. 소스 코드를 좀 더 스크롤 해 나가면 다음 설명이 있습니다. 
: 

     class IFileDescriptor (ILoggingContext) : 
         "" " 
         A file descriptor. 
         "" " 

         def fileno () : 
             ... 

         def connectionLost (reason) : 
             ... 

docstring을 나타했지만 이러한 콜백의 목적은 이름부터 명확합니다. ``fileno``는 주목하고있다 파일 디스크립터를 반환해야합니다, 그리고``connectionLost``는 연결을 닫을 때 호출됩니다. 그리고``PoetrySocket`` 객체도 이러한 메소드를 구현하고있는 것을 알 수 있지요. 

마지막으로``IFileDescriptor``는`ILoggingContext``을 계승하고 있습니다. 여기에서는 더 이상 설명하지 않지만``logPrefix`` 콜백을 구현할 필요가있는 것은이 때문입니다. `interfaces <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py>`_ 모듈에서 자세한 정보를 확인할 수 있습니다. 

     * NOTE : *``doRead``는 소켓이 닫힐 때를 나타내는 특수한 값을 반환한다는 것을 알았다지도 모릅니다. 
     어떻게 알까요? 기본적으로는 이것 없이는 작동하지 않았고, 무엇을하고 있는지를 확인하기 위해 동일한 인터페이스 Twisted의 구현을 살짝 보았다. 
     이에 대해 자리를 잡고 실습지도 모릅니다. 소프트웨어 문서는 가끔 틀리거나 불완전한 수도 있습니다. 
     아마 당신이 그 충격에서 회복 한 때, 나는 파트 5를 쓰고 마치고 것입니다. 

콜백에 대해 더 알아보기 
-------------------------------- 
Twisted를 사용한 새로운 클라이언트는 원래의 비동기 클라이언트에 매우 가까운 상태에 있습니다. 두 클라이언트가 각각의 소켓에 연결하고 거기에서 (비동기) 데이터를 읽어들입니다. 큰 차이는 Twisted 클라이언트``select`` 루프를 필요로하지 않는 것입니다. Twisted의 reactor를 대신 사용하므로. 

``doRead`` 콜백은 가장 중요한 것들 중 하나입니다. 소켓에서 읽을 수있는 데이터가 있으면 Twisted 그것을 호출합니다. 그림 7에 그 처리의 모습을 나타냅니다. 

.. _figure7 : 

.. figure :: images / p04_reactor-doread.png 

     그림 7 :``doRead`` 콜백 


콜백이 호출 될 때마다, 최대한의 데이터를 읽어 들여, 블록하지 않고 멈 춥니 다. 3 부에서 언급했듯이, 이상한 거동도 (블록이 필요없이) Twisted는 우리의 코드를 멈추지 않습니다. 설명대로 실행할 수 있으며 일어났다는 것을 확인할 수 있습니다. Twisted 클라이언트와 같은 디렉토리에`twisted-client-1 / get-poetry-broken.py <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry- broken.py>`_라는 깨진 클라이언트가 있습니다. 이 클라이언트는 두 가지 예외를 던지는 점이 지금까지 봐 왔던 것과 다릅니다. 

# 깨진 클라이언트는 소켓을 블로킹하지 않습니다. 
#``doRead`` 콜백은 소켓이 닫힐 때까지 바이트를 (아마 차단하면서) 읽는 계속뿐입니다. 

그러면, 다음과 같이하여 손상된 클라이언트를 실행시켜 보자. 
: 

     python twisted-client-1 / get-poetry-broken.py 10000 10001 10002 


이런 느낌의 출력이 될 것입니다. 
: 

     Task 1 : got 3003 bytes of poetry from 127.0.0.1:10000 
     Task 3 : got 653 bytes of poetry from 127.0.0.1:10002 
     Task 2 : got 623 bytes of poetry from 127.0.0.1:10001 
     Task 1 : 3003 bytes of poetry 
     Task 2 : 623 bytes of poetry 
     Task 3 : 653 bytes of poetry 
     Got 3 poems in 0 : 00 : 10.132753 


작업 순서가 조금 다른 것을 제외하면 이것은 원래의 블로킹 클라이언트처럼 보입니다. 라기보다는 깨진 클라이언트는 블로킹 클라이언트이기 때문에 다른 안됩니다. 콜백 내에서 블로킹``recv`` 호출을 사용하여 비동기 Twisted 프로그램을 동기화 버전으로 변경했습니다. 따라서 비동기 이점이 전혀없고``select`` 루프의 복잡성에 마주하게되었습니다. 

Twisted 같은 이벤트 루프가 제공하는 종류의 멀티 태스킹은`cooperative <http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing>`_입니다. Twisted는 파일 디스크립터를 읽고 쓸 준비가되었을 때 우리에게 알려줍니다 만 차단하지 않을 정도의 양의 데이터 만 전송하지 않도록 잘 행동 해하지 않으면 안됩니다. 그리고 다른 종류의 블로킹 호출``os.system`` 같은 것, 피하지 않으면 안됩니다. 또한 (CPU에 영향을받는) 장시간의 계산을 필요로하는 작업이 있으면, 그것을 작은 청크로 분할하는 것은 우리의 일입니다. 입출력 작업을 가능한 한 진행되게하기 때문입니다. 

깨진 클라이언트가 아직도 작동한다는 것을 의미한다는 점에주의하십시오. 제대로 모든시를 다운로드군요. 비동기 입출력의 효율성의 혜택을 누릴 수없는 것뿐입니다. 그래도 깨진 클라이언트는 원래의 블로킹 클라이언트보다 매우 빠르게 동작하는 것을 알 수 있습니다. 깨진 클라이언트는 프로그램 시작 시점에서 모든 서버에 연결하는 것입니다. 서버는 즉시 데이터를 보내기 시작하고, 비록 (한계까지)로드 않아도 OS는 입력 데이터의 약간을 버퍼링하기 때문에 블로킹 클라이언트는 한 번에 하나의 서버에서만 데이터를 읽을 수 없지만 효율적으로 다른 서버에서 데이터를받습니다. 

그러나이 "간계"는 짧은시 같은 소량의 데이터 만 작동하지 않습니다. 만약 예를 들어, 2000 만 단어로 구성된 해커가 세계 최고의`Lisp <http : //http//en.wikipedia.org/wiki/Lisp_ (programming_language)>`_ 인터프리터를 써 진정한 사랑을 쟁취 라는 도전을 쓴 대작 (역주 : 원문에서는 epic sagas)를 세 다운로드하고 있으면 운영 체제의 버퍼 곧 꽉 찬 버려, 깨진 클라이언트는 원래의 블로킹 것에 비해 무섭게 비효율적 으로되어 있던 것입니다. 

정리 
------ 
Twisted를 사용한 최초의시 클라이언트에 대해 더 이상 언급하지 않습니다. 시를 기다리는``PoetrySockets``가 없어지면`connectionLost <http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L74>`_ 콜백이 reactor를 종료 시킨다는 것은 조심하는 것이 좋을지도 모릅니다. 프로그램에서시를 다운로드 이외의 일을하지 않는 것처럼 생각되기 때문에 때문에 그만큼 대단한 기술은 아니지만 더 낮은 수준의 reactor의 API``removeReader``와``getReaders``,을 사용하고 있습니다. 

여기서 클라이언트 구현에 사용한``Reader``의 API와 마찬가지로``Writer`` 있습니다. 이것은 데이터를 발송 
동안 감시하고 싶은 파일 디스크립터 상상대로 작동합니다. 더 자세한 것은`interfaces <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py>`_ 파일에서 확인하십시오. 가져 오기 및 내보내기를 별도의 API하고있는 이유는`select`` 호출이 두 종류의 이벤트 (파일 기술자는 읽고 쓰기의 각각에서 사용되는)를 구별하고 있기 때문입니다. 물론 같은 파일 디스크립터에서 두 이벤트를 기다리는 수 있습니다. 

": doc :`p05`"는 좀 더 고차원의 추상화를 사용하여 Twisted 의한시 클라이언트의 두 번째 버전을 작성하는 것입니다. 그 과정에서 Twisted 인터페이스와 API를 좀 더 배워갑니다. 

추천 연습 문제 
------------------ 
#. 서버에 연결하는 데 실패 할 때 프로그램이 충돌하지 않도록 고쳐 봅시다. 
#. 지정된 시간에 시가 끝나지 않도록한다면 클라이언트 시간 초과하도록하기 위해``callLater``을 사용하십시오. 시 시간에 끝나도록한다면 시간을 취소 할 수 있도록``callLater``의 반환 값을 읽습니다.

..
    <H2>Part 4: Twisted Poetry
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Our First Twisted Client
    Although Twisted is probably more often used to write servers, clients are simpler than servers and we're starting out as simply as possible. Let's try out our first poetry client written with Twisted. The source code is in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py"><TT>twisted-client-1/get-poetry.py</TT></A>. Start up some poetry servers as before:
    python blocking-server/slowpoetry.py --port 10000 poetry/ecstasy.txt --num-bytes 30
    python blocking-server/slowpoetry.py --port 10001 poetry/fascination.txt
    python blocking-server/slowpoetry.py --port 10002 poetry/science.txt
    And then run the client like this:
    python twisted-client-1/get-poetry.py 10000 10001 10002
    And you should get some output like this:
    Task 1: got 60 bytes of poetry from 127.0.0.1:10000
    Task 2: got 10 bytes of poetry from 127.0.0.1:10001
    Task 3: got 10 bytes of poetry from 127.0.0.1:10002
    Task 1: got 30 bytes of poetry from 127.0.0.1:10000
    Task 3: got 10 bytes of poetry from 127.0.0.1:10002
    Task 2: got 10 bytes of poetry from 127.0.0.1:10001
    ...
    Task 1: 3003 bytes of poetry
    Task 2: 623 bytes of poetry
    Task 3: 653 bytes of poetry
    Got 3 poems in 0:00:10.134220
    Just like we did with our non-Twisted asynchronous client. Which isn't surprising as they are doing essentially the same thing. Let's take a look at the source code to see how it works. Open up the client in your editor so you can examine the code we are discussing.
    <P style="padding-left: 30px;"><STRONG>Note</STRONG>: As I mentioned in Part 1, we will begin our use of Twisted by using some very low-level APIs. By doing this we bypass some of the layers of Twisted's abstractions so we can learn Twisted from the "inside out". But this means a lot of the APIs we will learn in the beginning are not often used when writing real code. Just keep in mind that these early programs are learning exercises, not examples of how to write production software.
    The Twisted client starts up by creating a set of <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L53"><CODE>PoetrySocket</CODE></A> objects. A <CODE>PoetrySocket</CODE> initializes itself by creating a real network socket, connecting to a server, and switching to non-blocking mode:
    self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    self.sock.connect(address)
    self.sock.setblocking(0)
    Eventually we'll get to a level of abstraction where we aren't working with sockets at all, but for now we still need to. After creating the network connection, a <CODE>PoetrySocket</CODE> passes <EM>itself</EM> to the <CODE>reactor</CODE> via the <CODE>addReader</CODE> method:
    # tell the Twisted reactor to monitor this socket for reading
    from twisted.internet import reactor
    reactor.addReader(self)
    This method gives Twisted a file descriptor you want to monitor for incoming data. Why are we passing Twisted an object instead of a file descriptor and a callback? And how will Twisted know what to do with our object since Twisted certainly doesn't contain any poetry-specific code? Trust me, I've looked. Open up the <TT><A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py">twisted.internet.interfaces</A></TT> module and follow along with me.
    <H3>Twisted Interfaces
    There are a number of sub-modules in Twisted called <CODE>interfaces</CODE>. Each one defines a set of <CODE>Interface</CODE> classes. As of version 8.0, Twisted uses <CODE><A href="http://www.zope.org/Products/ZopeInterface">zope.interface</A></CODE> as the basis for those classes, but the details of that package aren't so important for us. We're just concerned with the Interface sub-classes in Twisted itself, like the ones you are looking at now.
    One of the principle purposes of Interfaces is documentation. As a Python programmer you are doubtless familiar with <A href="http://en.wikipedia.org/wiki/Duck_typing">Duck Typing</A>, the notion that the type of an object is principally defined not by its position in a class hierarchy but by the public interface it presents to the world. Thus two objects which present the same public interface (i.e., walk like a duck, quack like a …) are, as far as duck typing is concerned, the same sort of thing (a duck!). Well an Interface is a somewhat formalized way of specifying just what it means to walk like a duck.
    Skip down the <TT>twisted.internet.interfaces</TT> source code until you come to the definition of the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L810"><CODE>addReader</CODE></A> method. It is declared in the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L801"><CODE>IReactorFDSet</CODE></A> Interface and should look something like this:
    def addReader(reader):
        """
        I add reader to the set of file descriptors to get read events for.

        @param reader: An L{IReadDescriptor} provider that will be checked for
                       read events until it is removed from the reactor with
                       L{removeReader}.

        @return: C{None}.
        """
    <CODE>IReactorFDSet</CODE> is one of the Interfaces that Twisted reactors implement. Thus, any Twisted reactor has a method called <CODE>addReader</CODE> that works as described by the docstring above. The method declaration does not have a <CODE>self</CODE> argument because it is solely concerned with defining a public interface, and the <CODE>self</CODE> argument is part of the implementation (i.e., the caller does not have to pass <CODE>self</CODE> explicitly). Interface objects are never instantiated or used as base classes for real implementations.
    <P style="padding-left: 30px;"><STRONG>Note 1:</STRONG> Technically, <CODE>IReactorFDSet</CODE> would only be implemented by reactors that support waiting on file descriptors. As far as I know, that currently includes all available reactor implementations.
    <P style="padding-left: 30px;"><STRONG>Note 2</STRONG>: It is possible to use Interfaces for more than documentation. The <CODE>zope.interface</CODE> module allows you to explicitly declare that a class implements one or more interfaces, and provides mechanisms to examine these declarations at run-time. Also supported is the concept of adaptation, the ability to dynamically provide a given interface for an object that might not support that interface directly. But we're not going to delve into these more advanced use cases.
    <P style="padding-left: 30px;"><STRONG>Note 3:</STRONG> You might notice a similarity between Interfaces and <A href="http://www.python.org/dev/peps/pep-3119/">Abstract Base Classes</A>, a recent addition to the Python language. We will not be exploring their similarities and differences here, but you might be interested in reading an <A href="http://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html">essay</A> by Glyph, the Twisted project founder, that touches on that subject.
    According to the docstring above, the <CODE>reader</CODE> argument of <CODE>addReader</CODE> should implement the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L947"><CODE>IReadDescriptor</CODE></A> interface. And that means our <CODE>PoetrySocket</CODE> objects have to do just that.<BR>
    Scrolling through the module to find this new interface, we see:
    class IReadDescriptor(IFileDescriptor):

        def doRead():
            """
            Some data is available for reading on your descriptor.
            """
    And you will find an implementation of <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L88"><CODE>doRead</CODE></A> on our <CODE>PoetrySocket</CODE> objects. It reads data from the socket asynchronously, whenever it is called by the Twisted reactor. So <CODE>doRead</CODE> is really a callback, but instead of passing it directly to Twisted, we pass in an object with a <CODE>doRead</CODE> method. This is a common idiom in the Twisted framework — instead of passing a function you pass an object that must implement a given Interface. This allows us to pass a set of related callbacks (the methods defined by the Interface) with a single argument. It also lets the callbacks communicate with each other through shared state stored on the object.
    So what other callbacks are implemented on <CODE>PoetrySocket</CODE> objects? Notice that <CODE>IReadDescriptor</CODE> is a sub-class of <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L918"><CODE>IFileDescriptor</CODE></A>. That means any object that implements <CODE>IReadDescriptor</CODE> must also implement <CODE>IFileDescriptor</CODE>. And if you do some more scrolling, you will find:
    class IFileDescriptor(ILoggingContext):
        """
        A file descriptor.
        """

        def fileno():
            ...

        def connectionLost(reason):
            ...
    I left out the docstrings above, but the purpose of these callbacks is fairly clear from the names: <CODE>fileno</CODE> should return the file descriptor we want to monitor, and <CODE>connectionLost</CODE> is called when the connection is closed. And you can see our <CODE>PoetrySocket</CODE> objects implement those methods as well.
    Finally, <CODE>IFileDescriptor</CODE> inherits from <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py#L905"><CODE>ILoggingContext</CODE></A>. I won't bother to show it here, but that's why we need to implement the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L110"><CODE>logPrefix</CODE></A> callback. You can find the details in the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py"><CODE>interfaces</CODE></A> module.
    <P style="padding-left: 30px;"><STRONG>Note</STRONG>: You might notice that <CODE>doRead</CODE> is returning special values to indicate when the socket is closed. How did I know to do that? Basically, it didn't work without it and I peeked at Twisted's implementation of the same interface to see what to do. You may wish to sit down for this: sometimes software documentation is wrong or incomplete. Perhaps when you have recovered from the shock, I'll have finished Part 5.
    <H3>More on Callbacks
    Our new Twisted client is really quite similar to our original asynchronous client. Both clients connect their own sockets, and read data from those sockets (asynchronously). The main difference is the Twisted client doesn't need its own <CODE>select</CODE> loop — it uses the Twisted reactor instead.
    The <CODE>doRead</CODE> callback is the most important one. Twisted calls it to tell us there is some data ready to read from our socket. We can visualize the process in Figure 7:
    <DIV id="attachment_1479" class="wp-caption aligncenter" style="width: 356px"><A href="./part4_files/reactor-doread.png"><IMG class="size-full wp-image-1479" title="Figure 7: the doRead callback" src="./part4_files/reactor-doread.png" alt="Figure 7: the doRead callback" width="346" height="276"></A><P class="wp-caption-text">Figure 7: the doRead callback</DIV>
    Each time the callback is invoked it's up to us to read all the data we can and then stop without blocking. And as we said in Part 3, Twisted can't stop our code from misbehaving (from blocking needlessly). We can do just that and see what happens. In the same directory as our Twisted client is a broken client called <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry-broken.py"><TT>twisted-client-1/get-poetry-broken.py</TT></A>. This client is identical to the one you've been looking at, with two exceptions:
    <OL>
    * The broken client doesn't bother to make the socket non-blocking.
    * The <CODE>doRead</CODE> callback just keeps reading bytes (and possibly blocking) until the socket is closed.
    </OL>
    Now try running the broken client like this:
    python twisted-client-1/get-poetry-broken.py 10000 10001 10002
    You'll get some output that looks something like this:
    Task 1: got 3003 bytes of poetry from 127.0.0.1:10000
    Task 3: got 653 bytes of poetry from 127.0.0.1:10002
    Task 2: got 623 bytes of poetry from 127.0.0.1:10001
    Task 1: 3003 bytes of poetry
    Task 2: 623 bytes of poetry
    Task 3: 653 bytes of poetry
    Got 3 poems in 0:00:10.132753
    Aside from a slightly different task order this looks like our original blocking client. But that's because the broken client <EM>is</EM> a blocking client. By using a blocking <CODE>recv</CODE> call in our callback, we've turned our nominally asynchronous Twisted program into a synchronous one. So we've got the complexity of a <CODE>select</CODE> loop without any of the benefits of asynchronicity.
    The sort of multi-tasking capability that an event loop like Twisted provides is <A href="http://en.wikipedia.org/wiki/Computer_multitasking#Cooperative_multitasking.2Ftime-sharing">cooperative</A>. Twisted will tell us when it's OK to read or write to a file descriptor, but we have to play nice by only transferring as much data as we can without blocking. And we must avoid making other kinds of blocking calls, like <CODE>os.system</CODE>. Furthermore, if we have a long-running computational (CPU-bound) task, it's up to us to split it up into smaller chunks so that I/O tasks can still make progress if possible.
    Note that there is a sense in which our broken client still works: it does manage to download all the poetry we asked it to. It's just that it can't take advantage of the efficiencies of asynchronous I/O. Now you might notice the broken client still runs a lot faster than the original blocking client. That's because the broken client connects to all the servers at the start of the program. Since the servers start sending data immediately, and since the OS will buffer some of the incoming data for us even if we don't read it (up to a limit), our blocking client is effectively receiving data from the other servers even though it is only reading from one at a time.
    But this "trick" only works for small amounts of data, like our short poems. If we were downloading, say, the three 20 million-word epic sagas that chronicle one hacker's attempt to win his true love by writing the world's greatest <A href="http://http//en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</A> interpreter, the operating system buffers would quickly fill up and our broken client would be scarcely more efficient than our original blocking one.
    <H3>Wrapping Up
    I don't have much more to say about our first Twisted poetry client. You might note the <A href="http://github.com/jdavisp3/twisted-intro/blob/master/twisted-client-1/get-poetry.py#L74"><CODE>connectionLost</CODE></A> callback shuts down the reactor after there are no more <CODE>PoetrySocket</CODE>s waiting for poems. That's not such a great technique since it assumes we aren't doing anything else in the program other than download poetry, but it does illustrate a couple more low-level reactor APIs, <CODE>removeReader</CODE> and <CODE>getReaders</CODE>.
    There are <CODE>Writer</CODE> equivalents to the <CODE>Reader</CODE> APIs we used in this client, and they work in analogous ways for file descriptors we want to monitor for sending data to. Consult the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/interfaces.py"><CODE>interfaces</CODE></A> file for more details. The reason reading and writing have separate APIs is because the <CODE>select</CODE> call distinguishes between those two kinds of events (a file descriptor becoming available for reading or writing, respectively). It is, of course, possible to wait for both events on the same file descriptor.
    In <A href="http://krondo.com/blog/?p=1522">Part 5</A>, we will write a second version of our Twisted poetry client using some higher-level abstractions, and learn some more Twisted Interfaces and APIs along the way.
    <H3>Suggested Exercises
    <OL>
    * Fix the client so that a failure to connect to a server does not crash the program.
    * Use <CODE>callLater</CODE> to make the client timeout if a poem hasn't finished after a given interval. Read about the return value of <CODE>callLater</CODE> so you can cancel the timeout if the poem finishes on time.
    </OL>

