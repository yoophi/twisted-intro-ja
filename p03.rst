============================= 
파트 3 : 눈을 돌려 보자 
============================= 

아무것도하지 않는 Twisted있는 방법 
---------------------------- 
그럼 Twisted를 사용하여 비동기 적으로시를 얻는 클라이언트를 다시 구현하고 갑시다. 와 그 전에 분위기를 잡기 위해 정말 간단한 Twisted 프로그램을 작성하자. 2 부에서 언급했듯이, 소개하는 예제는 Twisted 8.2.0을 사용하여 개발했습니다. Twisted의 API는 변해가는 것입니다 만, 사용하고자하는 핵심 API는 좀처럼 변하지 않을 것입니다. 예 바뀌었다해도, 여기서 소개하는 예제는 릴리스에서도 움직이는 생각합니다. Twisted을 설치해야`여기 <http://twistedmatrix.com/trac/wiki/Downloads>`_에서 제공합니다. 

가장 간단한 Twisted 프로그램은 다음과 같습니다. ``twisted-intro``의 최상위 디렉토리에서보고`basic-twisted / simple.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/simple.py >`_이 있습니다. 
: 

     from twisted.internet import reactor 
     reactor.run () 

다음과 같이하여 실행할 수 있습니다. 
: 

     python basic-twisted / simple.py 

": doc :`p02`"에서 본 바와 같이, Twisted는`Reactor Pattern <http://en.wikipedia.org/wiki/Reactor_pattern>`_의 구현이며, reactor 또는 이벤트 루프를 나타내는 객체를가집니다 . 이것은 모든 Twisted 프로그램에서 핵심 것입니다 가장 첫 번째 줄에``reactor`` 개체를 사용할 수 있도록 두 번째 줄 reactor 루프를 시작하도록 지시합니다. 

이 프로그램은 아무것도하지 눌러 앉아있을뿐입니다. ``Control-C``을 누르면 멈출 수 있지만, 그렇지 않으면 끝없이 계속 실행 것입니다. 보통 입출력을 모니터링 할 하나 이상의 파일 디스크립터 (시 서버에 연결있는 생각하십시오)를 루프에 제공합니다. 그 방법은 나중에 살펴로서 여기에서는 reactor 루프를 그대로 데스 둡니다. 반복을 계속`busy loop <http://en.wikipedia.org/wiki/Busy_waiting>`_하지 않는다는 점에 유의하십시오. CPU의 동작 상황을 표시 할 수 있다면 기술적으로 무한 루프에 의해 발생하는 스파이크 현상이 일어나고 있지 않다는 것을 알게 될 것입니다. 실제로 여기에 제시된 프로그램은 완전히 CPU를 사용하지 않습니다. 대신, reactor는 ": ref :`figure5`"의 윗부분주기에 머물고 있습니다. 결코 발생하지 않는 이벤트를 기다리면서입니다. (엄밀히 말하면 존재하지 않는 파일 디스크립터에 대한``select`` 호출을 기다리고 있습니다) 

Hamletian inaction 은유를 상기시킬지도 모르지만, 아직도 어쩔 수없이 사랑스러운 프로그램입니다. 더 재미있게 해 나가고 싶지만 이미 일부 나타났다 수 있습니다. 

#. Twisted의 reactor 루프는 지시가 주어질 때까지 시작하지 않습니다. ``reactor.run ()`를 호출하는 것으로 시작합니다. 
#. reactor 루프는 시작 된 것과 동일한 스레드에서 실행됩니다. 여기에서의 경우 main 스레드 (게다가 여기 만)에서 실행됩니다. 
#. 일단 루프가 시작하면 그대로 동작합니다. reactor 프로그램 (또는 시작 된 특정 스레드)의 "지배"에 있습니다. 
# 아무것도 할 수 없으면 reactor 루프는 CPU를 소비하지 않습니다. 
#. reactor 명시 적으로 만들어지지 않습니다. import하면됩니다. 

마지막 점은 설명 할 가치가 있습니다. Twisted에서는 reactor는 기본적으로`싱글 톤 <http://en.wikipedia.org/wiki/Singleton_pattern>`_입니다. 유일한 reactor 개체 밖에없고, import 할 때 내재적으로 작성됩니다. ``twisted.internet`` 패키지``reactor`` 모듈을 보면 매우 작은 코드를 확인할 수있는 것입니다. 실제 구현은 다른 파일 (`twisted.internet.selectreactor <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/selectreactor.py>`_)로 있습니다 . 

사실 Twisted에는 여러 reactor 구현합니다. 2 부에서 소개 한 것처럼``select``의 호출은 파일 디스크립터를 기다리는 하나의 방법에 지나지 않습니다. Twisted가 사용하는 기본 구현은 있지만 다른 방법을 사용 reactor를 활성화 할 수 있습니다. 예를 들어`twisted.internet.pollreactor <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/pollreactor.py>`_는`select`` 대신` poll`` 시스템 호출을 사용합니다. 

다른 reactor 구현을 사용하기 위해서는``twisted.internet.reactor``을 사용하기 전에``install`` 둡니다. ``pollreactor``를 설치하려면 다음과 같이합니다. 
: 

     from twisted.internet import pollreactor 
     pollreactor.install () 


특정 reactor 구현을 먼저 설치하지``twisted.internet.reactor``을 import하면 Twisted는`selectreactor``를 설치하는 것입니다. 따라서 실수로 기본 reactor를 설치하여 버리는 것을 방지하기 위해 모듈의 최상위에 reactor를 가져 오지 것이 일반적인 방법입니다. 그렇지 않고, 사용하는 것과 동일한 범위에서 reactor를 import합니다. 

     집필 시점에서는 Twisted 여러 reactor가 공존하는 것을 허락 같은 아키텍처로 점진적하고 있습니다. 
     이 사고에서는 reactor 개체 모듈에서 import되는 것이 아니라 참조로 전달되게 될 것입니다. 

그러면``pollreactor``를 사용하여 첫 번째 Twisted 프로그램을 다시 구현할 수 있군요. `basic-twisted / simple-poll.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/simple-poll.py>`_를보세요. 
: 

     from twisted.internet import pollreactor 
     pollreactor.install () 

     from twisted.internet import reactor 
     reactor.run () 

아무것도하지 않는``select`` 루프 대신 아무것도하지``poll`` 루프를 사용하게되었다는 것입니다. 멋있다! 

이 입문의 나머지 부분에서는 기본 reactor를 사용합니다. Twisted를 배우는 목적으로는 어떤 reactor도 같은 것입니다. 

안녕하세요 Twisted 
------------------ 
일단 뭔가 Twisted 프로그램을 만들어 봅시다. 단말기에 메시지를 표시하는 것은 다음과 같습니다. 물론 reactor 루프가 시작 된 후입니다. 
: 

     def hello () : 
         print 'Hello from the reactor loop!' 
         print 'Lately I feel like I \'m stuck in a rut ' 

     from twisted.internet import reactor 

     reactor.callWhenRunning (hello) 

     print 'Starting the reactor.' 
     reactor.run () 

이 프로그램은`basic-twisted / hello.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/hello.py>`_에두고 있습니다. 실행 해 보면 다음과 같은 출력을 얻을 수 있습니다. 
: 

     Starting the reactor. 
     Hello from the reactor loop! 
     Lately I feel like I 'm stuck in a rut. 

프로그램은 화면에 출력 한 후에도 계속 작동하므로 수동으로 중지시키지 않으면 안됩니다. 

``hello`` 함수는 reactor가 움직이기 시작한 후라는 점에 유의하십시오. Twisted 코드가 우리의 코드를 호출하지 않으면 안되기 때문에, reactor 자체 호출되는 것입니다. Twisted 호출 해 주었으면 함수에 대한 참조를 reactor 메소드``callWhenRunning``에 전달하여 동작을 변경할 수 있습니다. 물론 reactor를 이동하기 전에 당해 않으면 안됩니다. 

``hello`` 함수에 대한 참조는 콜백 (* callback *)라는 용어를 사용합니다. 콜백은 Twisted가 적당한 때 나중에 호출 ( "call us back")처럼 Twisted (또는 다른 프레임 워크도)에 미치는 함수에 대한 참조입니다. 이 경우 reactor 루프가 시작된 직후입니다. Twisted 루프는 우리가 작성한 코드는 분리되어 있기 때문에, reactor의 중심이되는 부분과 비즈니스 로직 부분의 상호 작용의 대부분은 다양한 API를 사용하여 Twisted 준 콜백 함수에서 시작 있습니다. 

다음 프로그램에서 Twisted 우리가 작성한 코드를 호출 모습을 확인할 수 있습니다. 
: 

     import traceback 

     def stack () : 
         print 'The python stack :' 
         traceback.print_stack () 

     from twisted.internet import reactor 
     reactor.callWhenRunning (stack) 
     reactor.run () 

이 코드는`basic-twisted / stack.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/stack.py>`_에 다음과 같은 출력을 표시 합니다. 
: 

     The python stack : 
     ... 
       reactor.run () <- This is where we called the reactor 
     ... 
     <- A bunch of Twisted function calls 
     ... 
       traceback.print_stack () <- The second line in the stack function 

도중의 모든 Twisted 호출을 생각하지 않습니다. ``reactor.run ()``우리가 전달 콜백의 관계에만 조심하십시오. 

     * 콜백과 어떻게 마주해야할까요? * 
     Twisted 만 콜백을 사용 reactor 프레임 워크라는 것은 없습니다. 
     가장 오래된 Python 비동기 프레임 워크 인`Medusa <http://www.nightmare.com/medusa/>`_와`asyncore <http://docs.python.org/library/asyncore.html#module-asyncore >`_는 콜백을 사용합니다. 
     많은 GUI 프레임 워크와 같이 GUI 툴킷 인`GTK <http://gtk.org/>`_와`QT <http://qt.nokia.com/>`_는 reactor 루프에서 움직입니다. 

reactive system의 개발자는 확실히 콜백을 좋아합니다. 아마 결혼 할 것이고, 이미 이렇게하고 있을지도 모르겠네요. 그러나 다음 사항을 염두에 두십시오. 

#. reactor 패턴은 단일 스레드입니다. 
#. Twisted 같은 reactive 프레임 워크는 우리가 독자적으로 구현 않아도 같이 reactor 루프를 구현하고 있습니다. 
# 우리의 코드는 비즈니스 로직을 구현하고 불리게합니다. 
# 싱글 스레드의 제어하에 있으므로 reactor 루프는 우리의 코드를 호출하지 말아야 될 것입니다. 
#. reactor는 우리의 코드의 어느 부분이 호출되어야 할 것인가를 미리 알 수있는 방법은 없습니다. 

이러한 상황에서는 콜백은 단순한 옵션이 없습니다. 실제로 수라고하면 이것뿐입니다. 

그림 6은 콜백 중에 무엇이 일어나고 있는지를 나타냅니다. 

.. _figure6 : 

.. figure :: images / p03_reactor-callback.png 

     그림 6 : reactor가 콜백을 처리 모습 


그림 6은 콜백의 몇 가지 중요한 성질을 그려 내고 있습니다. 

# 우리의 콜백 코드는 Twisted 루프와 동일한 스레드에서 움직입니다. 
# 콜백이 달릴 때, Twisted 루프는 움직이지 않습니다. 
# 반대의 경우도 마찬가지입니다. 
# 콜백 처리를 되 돌리면 reactor 루프는 다시 시작합니다. 

콜백 동안 Twisted 루프는 우리의 코드에서 결과적으로 차단됩니다. 따라서 콜백 코드가 어떤 시간도 낭비하지 않도록하지 않으면 안 될 것입니다. 특히 입출력을 기다리는 같은 호출 (blocking I / O calls)는 피해야 것입니다. 그렇지 않으면, reactor 패턴을 사용하고있는 모든 부분에서 예상치 못한 성능 저하를 초래하게된다 것입니다. Twisted는 우리의 코드를 차단하지 않도록 특별한 사전주의를 고무 것이 아니기 때문에 우리 자신이 확실하게주의를 기울여야 안됩니다. 앞으로 가끔 만나지입니다 같이 일반적인 네트워크를 통한 입출력은 Twisted 비동기 통신을하자, 그래서 우리가 그 어려움을 신경 쓸 필요는 없습니다. 

잠재적으로 차단하는 작업의 다른 예로는 소켓이 아닌 파일 디스크립터 (파이프 등)에서 읽고 쓰기 나 하위 프로세스가 완료 될 때까지 기다릴 수 있습니다. 블로킹에서 비 차단 작업 전환 방법은 무엇을하고 있는지에 따라서는 있지만, Twisted의 API가 도움이 될 수도 종종 있습니다. 또한 많은 Python 표준 함수는 블로킹 모드로 전환하는 방법은 없습니다. 예를 들어``os.system`` 함수는 서브 프로세스가 완료 될 때까지 항상 차단합니다. 바로 실행되는 같습니다. Twisted를 사용하는데는 서브 프로세스를 시작하기 위해서는 Twisted API 방식으로``os.system``을 피하도록하지 않으면 안됩니다. 

안녕 Twisted 
---------------- 
reactor의`stop`` 메소드를 사용하여 Twisted의 reactor에 그쳤다합시다. 그러나 중지 한 reactor는 다시 시작할 수 없기 때문에 일반적으로 프로그램이 처리를 종료하는 경우에만 이렇게 할 것입니다. 

     Twisted 메일 링리스트에서 자유롭게 시작 또는 중지 할 수 있도록 reactor를 다시 시작 가능하게 할 것인가라는 논의가있었습니다. 그러나 버전 8.2.0의 시점에서는 reactor를 시작 (따라서 중지도) 수는 원타임입니다. 

이것이 프로그램입니다. `basic-twisted / countdown.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/countdown.py>`_이 있습니다. 이 프로그램은 5 초 카운트 다운 후 reactor를 중지합니다. 
: 

     class Countdown (object) : 

         counter = 5 

         def count (self) : 
             from twisted.internet import reactor 
             if self.counter == 0 : 
                 reactor.stop () 
             else : 
                 print self.counter '...' 
                 self.counter - = 1 
                 reactor.callLater (1 self.count) 

     from twisted.internet import reactor 

     reactor.callWhenRunning (Countdown () count) 

     print 'Start!' 
     reactor.run () 
     print 'Stop!' 

Twisted 콜백을 등록하는데``callLater`` API를 사용하고 있습니다. ``callLater``에서는 콜백 함수는 두 번째 인수에서 첫 번째 인수는 콜백을 실행하여 원할 때까지의 시간 (초)입니다. 초에는 부동 소수점 사용할 수 있습니다. 

는 Twisted는 정확한 시간에 콜백을 실행하기 위해 어떻게하는 것입니까? 프로그램은 파일 디스크립터를 listen하고 있지 않는데 왜``select`` 루프 등과 같이 계속 기다리는 것일까? ``select`` 호출 다른 유사한 것도 그렇지만,은`시간`의 값을 받아들입니다. 시간 제한이 주어 그 시간에 입출력 준비되어있는 파일 디스크립터가 아무것도 없으면``select`` 호출 어쨌든 처리를 다시 것입니다. 이어하면서 시간 초과 값에 제로를 전달하여 완전히 차단하지 않고 파일 디스크립터 집합 실시간 확인 (또는 "폴") 할 수 있습니다. 

시간을 ": ref :`figure5`"이벤트 루프가 기다리는 또 일종의 이벤트라고 파악할 수 있습니다. 그리고 Twisted는`callLater``에 등록 된 모든 "시간 지정된 콜백"(timed callbacks)이 확실히 당시에 호출되도록 제한 시간을 사용합니다. 또는 거의 시간대로라고 할 수 있습니다. 만약 다른 콜백이 정말 장시간 실행되어 버리면, 시간 지정된 콜백은 예정된 시간보다 늦어 버릴지도 모릅니다. Twisted의`callLater``기구는`하드 실시간 <http://en.wikipedia.org/wiki/Real-time_computing#Hard_and_soft_real-time_systems>`_ 시스템에 요구되는 같은 종류의 보증을 제공하지 않습니다. 

위의 카운트 다운 프로그램의 출력은 다음과 같습니다. 
: 

     Start! 
     5 ... 
     4 ... 
     3 ... 
     2 ... 
     1 ... 
     Stop! 

마지막 "Stop!"행은 reactor가 처리를 종료 할 때 나타납니다``reactor.run ()``제어를 되돌릴에주의하십시오. 이제 자신 멈출 수 프로그램 수 있었어요. 

맡긴거야 Twisted 
------------------ 
Twisted는 콜백 형태로 우리의 코드를 호출하여 종료하는 경우가 종종 있으므로 콜백이 예외를 발생시킨 때 무슨 일이 일어나는가를 궁금해 모릅니다. 해 봅시다. `basic-twisted / exception.py <http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/exception.py>`_ 프로그램이다 콜백에서 예외를 발생시켜 하지만 다른 콜백은 보통으로 움직입니다. 
: 

     def falldown () : 
         raise Exception ( 'I fall down.') 

     def upagain () : 
         print 'But I get up again.' 
         reactor.stop () 

     from twisted.internet import reactor 

     reactor.callWhenRunning (falldown) 
     reactor.callWhenRunning (upagain) 

     print 'Starting the reactor.' 
     reactor.run () 

명령 줄에서 실행 해 보면 다음과 같은 느낌의 출력이 될 것입니다. 
: 

     Starting the reactor. 
     Traceback (most recent call last) : 
       ... # I removed most of the traceback 
     exceptions.Exception : I fall down. 
     But I get up again. 

첫 번째 콜백이 발생시킨 예외 추적이 보이지만, 두 번째 콜백은 첫 번째 이후에 실행되는 것에주의하십시오. ``reactor.stop ()`을 주석하면 프로그램은 영원히 계속 실행 것입니다. 콜백이 실패했을 때 (예외를보고 하겠지만)조차 reactor는 계속 움직이는 것입니다. 

네트워크 서버는 일반적으로 매우 강력한 소프트웨어 모임 인 것이 중요합니다. 어떤 불규칙한 버그가 고개를 들고 오자도, 충돌해서는 없습니다. 우리 자신의 오류를 처리하기 위해 마지 못해해야 할 말을하는 것이 아니라, Twisted가 알려주는 것을 머리에 넣어두면 좋습니다. 

시를 부탁 
---------------- 
이제 Twisted를 사용하여 일부 구절을 취급하는 준비가되었습니다. ": doc :`p04`"는 비동기 적으로시를 얻는 클라이언트의 Twisted 버전을 구현합시다. 

추천 연습 문제 
------------------ 
#``countdown.py`` 프로그램을 세 가지 독립적 인 카운터가 서로 다른 비율로 움직 이도록하자. 모든 카운터가 완료되면 reactor 중지하십시오. 
#`twisted.internet.task <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/task.py>`_ 노``LoopingCall`` 클래스를보고 하십시오. `LoopingCall <http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/task.py#L23>`_를 사용하여 위의 카운트 다운 프로그램을 다시 작성하십시오. ``start``와``stop`` 메소드를 사용하는 것만으로 상관하지 않고 "지연됐다"(deferred) 반환 값을 사용할 필요는 없습니다. 지연 된 값이 무엇인지, 그 다음 파트에서 학습하게됩니다.

..
    <H2>Part 3: Our Eye-beams Begin to Twist
    This continues the introduction started <A href="http://krondo.com/blog/?p=1209">here</A>. You can find an index to the entire series <A href="http://krondo.com/blog/?page_id=1327">here</A>.
    <H3>Doing Nothing, the Twisted Way
    Eventually we are going to re-implement our asynchronous poetry client using Twisted. But first let's write a few really simple Twisted programs just to get the flavor of things. As I mentioned in Part 2, I developed these examples using Twisted 8.2.0. Twisted APIs do change, but the core APIs we are going to use will likely change slowly, if at all, so I expect these examples to work for many future releases. If you don't have Twisted installed you can obtain it <A href="http://twistedmatrix.com/trac/wiki/Downloads">here</A>.
    The absolute simplest Twisted program is listed below, and is also available in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/simple.py"><TT>basic-twisted/simple.py</TT></A> in the base directory of the <TT>twisted-intro</TT> example code.
    from twisted.internet import reactor
    reactor.run()
    You can run it like this:
    python basic-twisted/simple.py
    As we saw in <A href="http://krondo.com/blog/?p=1247">Part 2</A>, Twisted is an implementation of the <A href="http://en.wikipedia.org/wiki/Reactor_pattern">Reactor Pattern</A> and thus contains an object that represents the reactor, or event loop, that is the heart of any Twisted program. The first line of our program imports the reactor object so we can use it, and the second line tells the reactor to start running the loop.
    This program just sits there doing nothing. You'll have to stop it by pressing <TT>Control-C</TT>, otherwise it will just sit there forever. Normally we would have given the loop one or more file descriptors (connected to, say, a poetry server) that we want to monitor for I/O. We'll see how to do that later, but for now our reactor loop is&nbsp;stuck. Note that this is not a <A href="http://en.wikipedia.org/wiki/Busy_waiting">busy loop</A> which keeps cycling over and over. If you happen to have a CPU meter on your screen, you won't see any spikes caused by this technically infinite loop. In fact, our program isn't using any CPU at all. Instead, the reactor is stuck at the top cycle of <A href="http://krondo.com/blog/?p=1247#figure5">Figure 5</A>, waiting for an event that will never come (to be specific, waiting on a <CODE>select</CODE> call with no file descriptors).
    That might make for a compelling metaphor of Hamletian inaction, but it's still a pretty boring program. We're about to make it more interesting, but we can already draw a few conclusions:
    <OL>
    * Twisted's reactor loop doesn't start until told to. You start it by calling <CODE>reactor.run()</CODE>.
    * The reactor loop runs in the same thread it was started in. In this case, it runs in the main (and only) thread.
    * Once the loop starts up, it just keeps going. The reactor is now "in control" of the program (or the specific thread it was started in).
    * If it doesn't have anything to do, the reactor loop does not consume CPU.
    * The reactor isn't created explicitly, just imported.
    </OL>
    That last point is worth elaborating on. In Twisted, the reactor is basically a <A href="http://en.wikipedia.org/wiki/Singleton_pattern">Singleton</A>. There is only one reactor object and it is created implicitly when you import it. If you open the <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/reactor.py"><CODE>reactor</CODE></A> module in the <CODE>twisted.internet</CODE> package you will find very little code. The actual implementation resides in other files (starting with <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/selectreactor.py"><CODE>twisted.internet.selectreactor</CODE></A>).
    Twisted actually contains multiple reactor implementations. As mentioned in Part 2, the <CODE>select</CODE> call is just one method of waiting on file descriptors. It is the default method that Twisted uses, but Twisted does include other reactors that use other methods. For example, <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/pollreactor.py"><CODE>twisted.internet.pollreactor</CODE></A> uses the <A href="http://www.makelinux.net/ldd3/chp-6-sect-3.shtml"><CODE>poll</CODE></A> system call instead of <CODE>select</CODE>.
    To use an alternate reactor, you must <CODE>install</CODE> it <EM>before</EM> importing <CODE>twisted.internet.reactor</CODE>. Here is how you install the <CODE>pollreactor</CODE>:
    from twisted.internet import pollreactor
    pollreactor.install()
    If you import <CODE>twisted.internet.reactor</CODE> without first installing a specific reactor implementation, then Twisted will install the <CODE>selectreactor</CODE> for you. For that reason, it is general practice not to import the reactor at the top level of modules to avoid accidentally installing the default reactor. Instead, import the reactor in the same scope in which you use it.
    <P style="padding-left: 30px;">Note: as of this writing, Twisted has been moving gradually towards an architecture which would allow multiple reactors to co-exist. In this scheme, a reactor object would be passed around as a reference rather than imported from a module.
    Now we can re-implement our first Twisted program using the <CODE>pollreactor</CODE>, as found in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/simple-poll.py"><TT>basic-twisted/simple-poll.py</TT></A>:
    from twisted.internet import pollreactor
    pollreactor.install()

    from twisted.internet import reactor
    reactor.run()
    And we have a poll loop that does nothing at all instead of a select loop that does nothing at all. Neato.
    We're going to stick with the default reactor for the rest of this introduction. For the purposes of learning Twisted, all the reactors do the same thing.
    <H3>Hello, Twisted
    Let's make a Twisted program that at least does <EM>something</EM>. Here's one that prints a message to the terminal window, after the reactor loop starts up:
    def hello():
        print 'Hello from the reactor loop!'
        print 'Lately I feel like I\'m stuck in a rut.'

    from twisted.internet import reactor

    reactor.callWhenRunning(hello)

    print 'Starting the reactor.'
    reactor.run()
    This program is in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/hello.py"><TT>basic-twisted/hello.py</TT></A>. If you run it, you will see this output:
    Starting the reactor.
    Hello from the reactor loop!
    Lately I feel like I'm stuck in a rut.
    You'll still have to kill the program yourself, since it gets stuck again after printing those lines.
    Notice the <CODE>hello</CODE> function is called after the reactor starts running. That means it is called by the reactor itself, so Twisted code must be calling our function. We arrange for this to happen by invoking the reactor method <CODE>callWhenRunning</CODE> with a reference to the function we want Twisted to call. And, of course, we have to do that before we start the reactor.
    We use the term <EM>callback</EM> to describe the reference to the <CODE>hello</CODE> function. A callback is a function reference that we give to Twisted (or any other framework) that Twisted will use to "call us back" at the appropriate time, in this case right after the reactor loop starts up. Since Twisted's loop is separate from our code, most interactions between the reactor core and our business logic will begin with a callback to a function we gave to Twisted using various APIs.
    We can see how Twisted is calling our code using this program:
    import traceback

    def stack():
        print 'The python stack:'
        traceback.print_stack()

    from twisted.internet import reactor
    reactor.callWhenRunning(stack)
    reactor.run()
    You can find it in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/stack.py"><TT>basic-twisted/stack.py</TT></A> and it prints out something like this:
    The python stack:
    ...
      reactor.run() &lt;-- This is where we called the reactor
    ...
    ...  &lt;-- A bunch of Twisted function calls
    ...
      traceback.print_stack() &lt;-- The second line in the stack function
    Don't worry about all the Twisted calls in between. Just notice the relationship between the <CODE>reactor.run()</CODE> call and our callback.
    <H5 style="padding-left: 30px;">What's the deal with callbacks?
    <P style="padding-left: 30px;">Twisted is not the only reactor framework that uses callbacks. The older asynchronous Python frameworks <A href="http://www.nightmare.com/medusa/">Medusa</A> and <A href="http://docs.python.org/library/asyncore.html#module-asyncore">asyncore</A> also use them. As do the GUI toolkits <A href="http://gtk.org/">GTK</A> and <A href="http://qt.nokia.com/">QT</A>, both based, like many GUI frameworks, on a reactor loop.
    <P style="padding-left: 30px;">The developers of reactive systems sure love callbacks. Maybe they should just marry them. Maybe they already did. But consider this:
    <OL style="padding-left: 30px">
    * The reactor pattern is single-threaded.
    * A reactive framework like Twisted implements the reactor loop so our code doesn't have to.
    * Our code still needs to get called to implement our business logic.
    * Since it is "in control" of the single thread, the reactor loop will have to call our code.
    * The reactor can't know in advance which part of our code needs to be called.
    </OL>
    <P style="padding-left: 30px">In this situation callbacks are not just one option — they are the only real game in town.
    Figure 6 shows what happens during a callback:<A name="figure6"></A>
    <DIV id="attachment_1421" class="wp-caption aligncenter" style="width: 227px"><A href="./part3_files/reactor-callback.png"><IMG class="size-full wp-image-1421" title="Figure 6: the reactor making a callback" src="./part3_files/reactor-callback.png" alt="Figure 6: the reactor making a callback" width="217" height="254"></A><P class="wp-caption-text">Figure 6: the reactor making a callback</DIV>
    Figure 6 illustrates some important properties of callbacks:
    <OL>
    * Our callback code runs in the same thread as the Twisted loop.
    * When our callbacks are running, the Twisted loop is not running.
    * And vice versa.
    * The reactor loop resumes when our callback returns.
    </OL>
    During a callback, the Twisted loop is effectively "blocked" on our code. So we should make sure our callback code doesn't waste any time. In particular, we should avoid making blocking I/O calls in our callbacks. Otherwise, we would be defeating the whole point of using the reactor pattern in the first place. Twisted will not take any special precautions to prevent our code from blocking, we just have to make sure not to do it. As we will eventually see, for the common case of network I/O we don't have to worry about it as we let Twisted do the asynchronous communication for us.
    Other examples of potentially blocking operations include reading or writing from a non-socket file descriptor (like a pipe) or waiting for a subprocess to finish. Exactly how you switch from blocking to non-blocking operations is specific to what you are doing, but there is often a Twisted API that will help you do it. Note that many standard Python functions have no way to switch to a non-blocking mode. For example, the <CODE>os.system</CODE> function will always block until the subprocess is finished. That's just how it works. So when using Twisted, you will have to eschew <CODE>os.system</CODE> in favor of the Twisted API for launching subprocesses.
    <H3>Goodbye, Twisted
    It turns out you can tell the Twisted reactor to stop running by using the reactor's <CODE>stop</CODE> method. But once stopped the reactor cannot be restarted, so it's generally something you do only when your program needs to exit.
    <P style="padding-left: 30px;">Note: there has been past discussion on the Twisted mailing list about making the reactor "restartable" so it could be started and stopped as you like. But as of version 8.2.0, you can only start (and thus stop) the reactor once.
    Here's a program, listed in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/countdown.py"><TT>basic-twisted/countdown.py</TT></A>, which stops the reactor after a 5 second countdown:
    class Countdown(object):

        counter = 5

        def count(self):
            from twisted.internet import reactor
            if self.counter == 0:
                reactor.stop()
            else:
                print self.counter, '...'
                self.counter -= 1
                reactor.callLater(1, self.count)

    from twisted.internet import reactor

    reactor.callWhenRunning(Countdown().count)

    print 'Start!'
    reactor.run()
    print 'Stop!'
    This program uses the <CODE>callLater</CODE> API to register a callback with Twisted. With <CODE>callLater</CODE> the callback is the second argument and the first argument is the number of seconds in the future you would like your callback to run. You can use a floating point number to specify a fractional number of seconds, too.
    So how does Twisted arrange to execute the callback at the right time? Since this program doesn't listen on any file descriptors, why doesn't it get stuck in the <CODE>select</CODE> loop like the others? The <CODE>select</CODE> call, and the others like it, also accepts an optional <EM>timeout</EM> value. If a timeout value is supplied and no file descriptors have become ready for I/O within the specified time then the <CODE>select</CODE> call will return anyway. Incidentally, by passing a timeout value of zero you can quickly check (or "poll") a set of file descriptors without blocking at all.
    You can think of a timeout as another kind of event the event loop of <A href="http://krondo.com/blog/?p=1247#figure5">Figure 5</A> is waiting for. And Twisted uses timeouts to make sure any "timed callbacks" registered with <CODE>callLater</CODE> get called at the right time. Or rather, at approximately the right time. If another callback takes a really long time to execute, a timed callback may be delayed past its schedule. Twisted's <CODE>callLater</CODE> mechanism cannot provide the sort of guarantees required in a <A href="http://en.wikipedia.org/wiki/Real-time_computing#Hard_and_soft_real-time_systems">hard real-time</A> system.
    Here is the output of our countdown program:
    Start!
    5 ...
    4 ...
    3 ...
    2 ...
    1 ...
    Stop!
    Note the "Stop!" line at the ends shows us that when the reactor exits, the <CODE>reactor.run</CODE> call returns. And we have a program that stops all by itself.
    <H3>Take That, Twisted
    Since Twisted often ends up calling our code in the form of callbacks, you might wonder what happens when a callback raises an exception. Let's try it out. The program in <A href="http://github.com/jdavisp3/twisted-intro/blob/master/basic-twisted/exception.py"><TT>basic-twisted/exception.py</TT></A> raises an exception in one callback, but behaves normally in another:
    def falldown():
        raise Exception('I fall down.')

    def upagain():
        print 'But I get up again.'
        reactor.stop()

    from twisted.internet import reactor

    reactor.callWhenRunning(falldown)
    reactor.callWhenRunning(upagain)

    print 'Starting the reactor.'
    reactor.run()
    When you run it at the command line, you will see this output:
    Starting the reactor.
    Traceback (most recent call last):
      ... # I removed most of the traceback
    exceptions.Exception: I fall down.
    But I get up again.
    Notice the second callback runs after the first, even though we see the traceback from the exception the first raised. And if you comment out the <CODE>reactor.stop()</CODE> call, the program will just keep running forever. So the reactor will keep going even when our callbacks fail (though it will report the exception).
    Network servers generally need to be pretty robust pieces of software. They're not supposed to crash whenever any random bug shows its head. That's not to say we should be lackadaisical when it comes to handling our own errors, but it's nice to know Twisted has our back.
    <H3>Poetry, Please
    Now we're ready to grab some poetry with Twisted. In <A href="http://krondo.com/blog/?p=1445">Part 4</A>, we will implement a Twisted version of our asynchronous poetry client.
    <H3>Suggested Exercises
    <OL>
    * Update the <TT>countdown.py</TT> program to have three independently running counters going at different rates. Stop the reactor when all counters have finished.
    * Consider the <CODE>LoopingCall</CODE> class in <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/task.py"><TT>twisted.internet.task</TT></A>. Rewrite the countdown program above to use <A href="http://twistedmatrix.com/trac/browser/tags/releases/twisted-8.2.0/twisted/internet/task.py#L23"><CODE>LoopingCall</CODE></A>. You only need the <CODE>start</CODE> and <CODE>stop</CODE> methods and you don't need to use the "deferred" return value in any way. We'll learn what a "deferred" value is in a later Part.
    </OL>
